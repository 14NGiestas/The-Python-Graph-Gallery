"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const freeze_1 = require("./freeze");
/**
 * Turn nbformat multiline strings (arrays of strings for simplifying diffs) into strings
 */
function demultiline(s) {
    if (Array.isArray(s)) {
        return s.join("");
    }
    return s;
}
exports.demultiline = demultiline;
/**
 * Split string into a list of strings delimited by newlines; useful for on-disk git comparisons;
 * and is the expectation for jupyter notebooks on disk
 */
function remultiline(s) {
    if (Array.isArray(s)) {
        // Assume
        return s;
    }
    // Use positive lookahead regex to split on newline and retain newline char
    return s.split(/(.+(:\r\n|\n))/g).filter(x => x !== "");
}
exports.remultiline = remultiline;
function isJSONKey(key) {
    return /^application\/(.*\+)json$/.test(key);
}
function createImmutableMimeBundle(mimeBundle) {
    // Map over all the mimetypes; turning them into our in-memory format
    //
    // {
    //   "application/json": {"a": 3; "b": 2};
    //   "text/html": ["<p>\n"; "Hey\n"; "</p>"];
    //   "text/plain": "Hey"
    // }
    //
    // to
    //
    // {
    //   "application/json": {"a": 3; "b": 2};
    //   "text/html": "<p>\nHey\n</p>";
    //   "text/plain": "Hey"
    // }
    // Since we have to convert from one type to another that has conflicting types; we need to hand convert it in a way that
    // flow is able to verify correctly. The way we do that is create a new object that we declare with the type we want;
    // set the keys and values we need; then seal the object with Object.freeze
    const bundle = {};
    for (const key in mimeBundle) {
        if (!isJSONKey(key) &&
            (typeof mimeBundle[key] === "string" || Array.isArray(mimeBundle[key]))) {
            // Because it's a string; we can't mutate it anyways (and don't have to Object.freeze it)
            bundle[key] = demultiline(mimeBundle[key]);
        }
        else {
            // we now know it's an Object of some kind
            bundle[key] = freeze_1.deepFreeze(mimeBundle[key]);
        }
    }
    return Object.freeze(bundle);
}
exports.createImmutableMimeBundle = createImmutableMimeBundle;
