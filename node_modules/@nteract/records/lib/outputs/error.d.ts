/**
 * Let this declare the way for well typed records for outputs
 *
 * General organization is:
 *
 *   - Declare the in-memory type
 *   - Declare the nbformat type (exactly matching nbformat.v4.schema.json)
 *   - Declare the message type (matching http://jupyter-client.readthedocs.io/en/stable/messaging.html)
 *   - Write a way to go from nbformat to our in-memory version
 *   - Write a way to go from message spec to our in-memory version
 *
 */
export declare type ErrorType = "error";
export declare const ERROR: ErrorType;
export declare type ErrorOutput = {
    outputType: ErrorType;
    ename: string;
    evalue: string;
    traceback: Array<string> | ReadonlyArray<string>;
};
export declare type NbformatErrorOutput = {
    output_type: "error" | "pyerr";
    ename: string;
    evalue: string;
    traceback: Array<string>;
};
export declare type ErrorMessage = {
    header: {
        msg_type: "error" | "pyerr";
    };
    content: {
        ename: string;
        evalue: string;
        traceback: Array<string>;
    };
};
export declare function errorOutput(eOut: {
    ename?: string;
    evalue?: string;
    traceback?: Array<string>;
}): Readonly<ErrorOutput>;
export declare namespace errorOutput {
    var type: "error";
    var fromNbformat: (s: NbformatErrorOutput) => ErrorOutput;
    var fromJupyterMessage: (msg: ErrorMessage) => ErrorOutput;
}
