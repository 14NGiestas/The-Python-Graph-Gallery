import * as common from "../common";
/**
 * Let this declare the way for well typed records for outputs
 *
 * General organization is:
 *
 *   - Declare the in-memory type
 *   - Declare the nbformat type (exactly matching nbformat.v4.schema.json)
 *   - Declare the message type (matching http://jupyter-client.readthedocs.io/en/stable/messaging.html)
 *   - Write a way to go from nbformat to our in-memory version
 *   - Write a way to go from message spec to our in-memory version
 *
 */
export declare type StreamName = "stdout" | "stderr";
export declare type StreamType = "stream";
export declare const STDOUT: StreamName;
export declare const STDERR: StreamName;
export declare const STREAM: StreamType;
export declare type StreamOutput = {
    outputType: StreamType;
    name: StreamName;
    text: string;
};
export declare type NbformatStreamOutput = {
    output_type: StreamType;
    name: StreamName;
    text: common.MultilineString;
};
export declare type StreamMessage = {
    header: {
        msg_type: StreamType;
    };
    content: {
        name: StreamName;
        text: string;
    };
};
export declare function streamOutput(s: Readonly<{
    name?: StreamName;
    text?: string;
}>): StreamOutput;
export declare namespace streamOutput {
    var type: "stream";
    var fromNbformat: (s: NbformatStreamOutput) => StreamOutput;
    var fromJupyterMessage: (msg: StreamMessage) => StreamOutput;
}
