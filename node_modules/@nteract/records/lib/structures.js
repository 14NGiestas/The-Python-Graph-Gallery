"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const immer_1 = __importDefault(require("immer"));
const v4_1 = __importDefault(require("uuid/v4"));
const cells_1 = require("./cells");
exports.v4NotebookVersion = 4;
const defaultCodeCell = {
    cell_type: cells_1.CODECELL,
    execution_count: null,
    metadata: {
        collapsed: false,
        outputHidden: false,
        inputHidden: false
    },
    source: "",
    outputs: []
};
const defaultMarkdownCell = {
    cell_type: cells_1.MARKDOWNCELL,
    metadata: {},
    source: ""
};
function createCodeCell(cell = defaultCodeCell) {
    return immer_1.default(defaultCodeCell, draft => Object.assign(draft, cell));
}
exports.createCodeCell = createCodeCell;
function createMarkdownCell(cell = defaultMarkdownCell) {
    return immer_1.default(defaultMarkdownCell, draft => Object.assign(draft, cell));
}
exports.createMarkdownCell = createMarkdownCell;
exports.emptyCodeCell = createCodeCell();
exports.emptyMarkdownCell = createMarkdownCell();
exports.defaultNotebook = {
    nbformat: exports.v4NotebookVersion,
    nbformat_minor: exports.v4NotebookVersion,
    metadata: new Object(),
    cellOrder: [],
    cellMap: new Object()
};
function createNotebook(notebook = exports.defaultNotebook) {
    return immer_1.default(exports.defaultNotebook, draft => Object.assign(draft, notebook));
}
exports.createNotebook = createNotebook;
exports.emptyNotebook = createNotebook();
// Intended to make it easy to use this with (temporary mutable cellOrder + cellMap)
function appendCell(cellStructure, immutableCell, id = v4_1.default()) {
    cellStructure.cellMap[id] = immutableCell;
    return {
        cellOrder: cellStructure.cellOrder.push(id),
        cellMap: cellStructure.cellMap
    };
}
exports.appendCell = appendCell;
function appendCellToNotebook(immnb, immCell) {
    const cellStructure = {
        cellOrder: immnb["cellOrder"],
        cellMap: immnb["cellMap"]
    };
    const { cellOrder, cellMap } = appendCell(cellStructure, immCell);
    immnb["cellOrder"] = cellOrder;
    immnb["cellMap"] = cellMap;
    return immnb;
}
exports.appendCellToNotebook = appendCellToNotebook;
function insertCellAt(notebook, cell, cellId, index) {
    notebook["cellMap"][cellId] = cell;
    notebook["cellOrder"][index] = cellId;
    return notebook;
}
exports.insertCellAt = insertCellAt;
function insertCellAfter(notebook, cell, cellId, priorCellId) {
    return insertCellAt(notebook, cell, cellId, notebook["cellOrder"].indexOf(priorCellId) + 1);
}
exports.insertCellAfter = insertCellAfter;
// Deprecation Warning: removeCell() is being deprecated. Please use deleteCell() instead
function removeCell(notebook, cellId) {
    console.log("Deprecation Warning: removeCell() is being deprecated. Please use deleteCell() instead");
    delete notebook["cellMap"][cellId];
    notebook["cellOrder"] = notebook["cellOrder"].filter((id) => id !== cellId);
    return notebook;
}
exports.removeCell = removeCell;
function deleteCell(notebook, cellId) {
    delete notebook["cellMap"][cellId];
    notebook["cellOrder"] = notebook["cellOrder"].filter((id) => id !== cellId);
    return notebook;
}
exports.deleteCell = deleteCell;
exports.monocellNotebook = appendCellToNotebook(exports.emptyNotebook, exports.emptyCodeCell);
