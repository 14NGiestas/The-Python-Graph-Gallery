/**
 * @module commutable
 */
import { ImmutableOutput } from "./outputs";
import { ExecutionCount } from "./primitives";
import { Map as ImmutableMap, List as ImmutableList, Record, RecordOf } from "immutable";
declare type CodeCellParams = {
    cell_type: "code";
    metadata: ImmutableMap<string, any>;
    execution_count: ExecutionCount;
    source: string;
    outputs: ImmutableList<ImmutableOutput>;
};
export declare const makeCodeCell: Record.Factory<CodeCellParams>;
export declare type ImmutableCodeCell = RecordOf<CodeCellParams>;
declare type MarkdownCellParams = {
    cell_type: "markdown";
    source: string;
    metadata: ImmutableMap<string, any>;
};
export declare const makeMarkdownCell: Record.Factory<MarkdownCellParams>;
export declare type ImmutableMarkdownCell = RecordOf<MarkdownCellParams>;
declare type RawCellParams = {
    cell_type: "raw";
    source: string;
    metadata: ImmutableMap<string, any>;
};
export declare const makeRawCell: Record.Factory<RawCellParams>;
export declare type ImmutableRawCell = RecordOf<RawCellParams>;
export declare type ImmutableCell = ImmutableMarkdownCell | ImmutableCodeCell | ImmutableRawCell;
export declare type CellType = "raw" | "markdown" | "code";
export {};
