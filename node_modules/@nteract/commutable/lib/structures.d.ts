import { CellId } from "./primitives";
import { ImmutableNotebook } from "./notebook";
import { ImmutableCell } from "./cells";
import { Map as ImmutableMap, List as ImmutableList } from "immutable";
export declare const createCodeCell: import("immutable").Record.Factory<{
    cell_type: "code";
    metadata: ImmutableMap<string, any>;
    execution_count: number | null;
    source: string;
    outputs: ImmutableList<import("./outputs").ImmutableOutput>;
}>;
export declare const createMarkdownCell: import("immutable").Record.Factory<{
    cell_type: "markdown";
    source: string;
    metadata: ImmutableMap<string, any>;
}>;
export declare const emptyCodeCell: import("immutable").RecordOf<{
    cell_type: "code";
    metadata: ImmutableMap<string, any>;
    execution_count: number | null;
    source: string;
    outputs: ImmutableList<import("./outputs").ImmutableOutput>;
}>;
export declare const emptyMarkdownCell: import("immutable").RecordOf<{
    cell_type: "markdown";
    source: string;
    metadata: ImmutableMap<string, any>;
}>;
export declare const defaultNotebook: ImmutableNotebook;
export declare const createNotebook: import("immutable").Record.Factory<import("./notebook").NotebookRecordParams>;
export declare const emptyNotebook: ImmutableNotebook;
export declare type CellStructure = {
    cellOrder: ImmutableList<CellId>;
    cellMap: ImmutableMap<CellId, ImmutableCell>;
};
/**
 * A function that appends a new cell to a CellStructure object.
 *
 * @param cellStructure The cellOrder and cellMap of the current notebook
 * @param immutableCell The cell that will be inserted into the cellStructure
 * @param id The id of the new cell, defaults to a new UUID
 *
 * @returns Cell structure with the new cell appended at the end
 */
export declare const appendCell: (cellStructure: CellStructure, immutableCell: ImmutableCell, id?: string) => CellStructure;
/**
 * A function that appends a cell to an immutable notebook.
 *
 * @param immnb An immutable data structure representing the notebook that will be modified
 * @param immCell The new cell that will be inserted into the notebook
 *
 * @returns The modified notebook
 */
export declare const appendCellToNotebook: (immnb: ImmutableNotebook, immCell: ImmutableCell) => ImmutableNotebook;
/**
 * Inserts a cell with cellID at a given index within the notebook.
 *
 * @param notebook The notebook the cell will be inserted into.
 * @param cell The cell that will be inserted
 * @param cellID The ID of the cell.
 * @param index The position we would like to insert the cell at
 *
 * @returns The modified notebook.
 */
export declare const insertCellAt: (notebook: ImmutableNotebook, cell: ImmutableCell, cellId: string, index: number) => ImmutableNotebook;
/**
 * Inserts a new cell with cellID before an existing cell with priorCellID
 * in the notebook.
 *
 * @param notebook The notebook the cell will be inserted into.
 * @param cell The cell that will be inserted
 * @param cellID The ID of the cell.
 * @param priorCellID The ID of the existing cell.
 */
export declare const insertCellAfter: (notebook: ImmutableNotebook, cell: ImmutableCell, cellId: string, priorCellId: string) => ImmutableNotebook;
/**
 * Delete a cell with CellID at a given location. Note that this function
 * is deprecated in favor of `deleteCell`.
 *
 * @param notebook The notebook containing the cell.
 * @param cellID The ID of the cell that will be deleted.
 *
 * @returns The modified notebook
 *
 * @deprecated use `deleteCell()` instead
 */
export declare const removeCell: (notebook: ImmutableNotebook, cellId: string) => ImmutableNotebook;
/**
 * Delete a cell with CellID at a given location.
 *
 * @param notebook The notebook containing the cell.
 * @param cellID The ID of the cell that will be deleted.
 *
 * @returns The modified notebook
 */
export declare const deleteCell: (notebook: ImmutableNotebook, cellId: string) => ImmutableNotebook;
/**
 * A new notebook with a single empty code cell. This function is useful
 * if you are looking to initialize a fresh, new notebook.
 */
export declare const monocellNotebook: ImmutableNotebook;
