"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const transforms_1 = require("@nteract/transforms");
const Fallback = ({ componentStack, error }) => (React.createElement("div", { style: {
        backgroundColor: "ghostwhite",
        color: "black",
        fontWeight: 600,
        display: "block",
        padding: "10px",
        marginBottom: "20px"
    } },
    React.createElement("h3", null,
        " Error: ",
        error.toString()),
    React.createElement("details", null,
        React.createElement("summary", null, "stack trace"),
        React.createElement("pre", null, componentStack))));
class RichestMime extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            error: null,
            info: null
        };
    }
    componentDidCatch(error, info) {
        this.setState({ error, info });
    }
    render() {
        if (this.state.error) {
            return (React.createElement(Fallback, { componentStack: this.state.info ? this.state.info.componentStack : "", error: this.state.error }));
        }
        const mimetype = transforms_1.richestMimetype(this.props.bundle, this.props.displayOrder, this.props.transforms);
        if (!mimetype) {
            // If no mimetype is supported, don't return an element
            return null;
        }
        // NOTE: When we transition to the compound component interface these should no longer be
        //       any (they were implicit any before based on prior code paths).
        //       Once the TypeScript migration is nearing completion we can clean this up.
        const Transform = this.props.transforms[mimetype];
        const data = this.props.bundle[mimetype];
        const metadata = this.props.metadata[mimetype];
        const onMetadataChangeScoped = (scopedChanges) => this.props.onMetadataChange &&
            this.props.onMetadataChange(Object.assign({}, this.props.metadata, { [mimetype]: scopedChanges }));
        return (React.createElement(Transform, { data: data, metadata: metadata, theme: this.props.theme, models: this.props.models, channels: this.props.channels, onMetadataChange: onMetadataChangeScoped }));
    }
}
RichestMime.defaultProps = {
    transforms: transforms_1.transforms,
    displayOrder: transforms_1.displayOrder,
    theme: "light",
    metadata: {},
    bundle: {},
    models: {}
};
exports.default = RichestMime;
