/**
 * @module types
 */
import * as Immutable from "immutable";
import { CommunicationRecordProps } from "./communication";
import { EntitiesRecordProps } from "./entities";
import { KernelRef, KernelspecsRef } from "./refs";
import { HostRecord } from "./entities/hosts";
import { Notification } from "react-notification-system";
import { MimeBundle } from "@nteract/commutable/src";
export * from "./communication";
export * from "./entities";
export * from "./ids";
export * from "./refs";
declare type KernelspecMetadata = {
    display_name: string;
    language: string;
    argv: string[];
    name?: string;
    env?: {
        [variable: string]: string;
    };
};
/**
 * This is the kernelspec as formed by spawnteract and jupyter kernelspecs --json
 */
export declare type KernelspecInfo = {
    name: string;
    spec: KernelspecMetadata;
};
export declare type Kernelspecs = {
    [name: string]: KernelspecInfo;
};
export declare type LanguageInfoMetadata = {
    name: string;
    codemirror_mode?: string | Immutable.Map<string, any> | object;
    file_extension?: string;
    mimetype?: string;
    pygments_lexer?: string;
};
export declare type NotebookMetadata = {
    kernelspec: KernelspecMetadata;
    language_info: LanguageInfoMetadata;
};
declare type PagePayloadMessage = {
    source: "page";
    data: MimeBundle;
    start: number;
};
declare type SetNextInputPayloadMessage = {
    source: "set_next_input";
    text: string;
    replace: boolean;
};
declare type EditPayloadMessage = {
    source: "edit";
    filename: string;
    line_number: number;
};
declare type AskExitPayloadMessage = {
    source: "ask_exit";
    keepkernel: boolean;
};
export declare type PayloadMessage = PagePayloadMessage | SetNextInputPayloadMessage | EditPayloadMessage | AskExitPayloadMessage;
export declare type CommsRecordProps = {
    targets: Immutable.Map<any, any>;
    info: Immutable.Map<any, any>;
    models: Immutable.Map<any, any>;
};
export declare type CommsRecord = Immutable.RecordOf<CommsRecordProps>;
export declare const makeCommsRecord: Immutable.Record.Factory<{
    targets: Immutable.Map<{}, {}>;
    info: Immutable.Map<{}, {}>;
    models: Immutable.Map<{}, {}>;
}>;
export declare type ConfigState = Immutable.Map<string, any>;
export declare type StateRecordProps = {
    kernelRef?: KernelRef | null;
    currentKernelspecsRef?: KernelspecsRef | null;
    communication: Immutable.RecordOf<CommunicationRecordProps>;
    entities: Immutable.RecordOf<EntitiesRecordProps>;
};
export declare const makeStateRecord: Immutable.Record.Factory<StateRecordProps>;
export declare type AppRecordProps = {
    host: HostRecord;
    githubToken?: string | null;
    notificationSystem: {
        addNotification: (msg: Notification) => void;
    };
    isSaving: boolean;
    lastSaved?: Date | null;
    configLastSaved?: Date | null;
    error: any;
    version: string;
};
export declare const makeAppRecord: Immutable.Record.Factory<AppRecordProps>;
export declare type AppRecord = Immutable.RecordOf<AppRecordProps>;
export declare type CoreRecord = Immutable.RecordOf<StateRecordProps>;
export declare type AppState = {
    app: AppRecord;
    comms: CommsRecord;
    config: ConfigState;
    core: CoreRecord;
};
