/**
 * @module types
 */
import * as Immutable from "immutable";
import { ImmutableCell, ImmutableNotebook, CellId } from "@nteract/commutable";
import { KernelRef } from "../..";
export declare type DocumentRecordProps = {
    type: "notebook";
    notebook: ImmutableNotebook;
    savedNotebook: ImmutableNotebook;
    transient: Immutable.Map<string, any>;
    cellPagers: any;
    editorFocused?: CellId | null;
    cellFocused?: CellId | null;
    copied: ImmutableCell | null;
    kernelRef?: KernelRef | null;
};
export declare const makeDocumentRecord: Immutable.Record.Factory<DocumentRecordProps>;
export declare type NotebookModel = Immutable.RecordOf<DocumentRecordProps>;
export declare type NotebookContentRecordProps = {
    mimetype?: string | null;
    created?: Date | null;
    format: "json";
    lastSaved?: Date | null;
    model: NotebookModel;
    filepath: string;
    type: "notebook";
    writable: boolean;
};
export declare const makeNotebookContentRecord: Immutable.Record.Factory<NotebookContentRecordProps>;
export declare type NotebookContentRecord = Immutable.RecordOf<NotebookContentRecordProps>;
