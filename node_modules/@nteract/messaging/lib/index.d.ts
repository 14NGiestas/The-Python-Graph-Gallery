/**
 * @module messaging
 */
import { Observable } from "rxjs";
import { JupyterMessage, ExecuteRequest, MessageType } from "./types";
import { PayloadMessage } from "@nteract/types";
export * from "./types";
interface CreateMessageFields extends Partial<JupyterMessage> {
    header?: never;
}
export declare function createMessage<MT extends MessageType>(msg_type: MT, fields?: CreateMessageFields): JupyterMessage<MT>;
export declare function createExecuteRequest(code?: string): ExecuteRequest;
/**
 * operator for getting all messages that declare their parent header as
 * parentMessage's header.
 *
 * @param parentMessage The parent message whose children we should fetch
 *
 * @returns A function that takes an Observable of kernel messages and returns
 * messages that are children of parentMessage.
 */
export declare const childOf: (parentMessage: JupyterMessage<MessageType, any>) => (source: Observable<JupyterMessage<MessageType, any>>) => any;
/**
 * ofMessageType is an Rx Operator that filters on msg.header.msg_type
 * being one of messageTypes.
 *
 * @param messageTypes The message types to filter on
 *
 * @returns An Observable containing only messages of the specified types
 */
export declare const ofMessageType: (...messageTypes: (string | [string])[]) => (source: Observable<JupyterMessage<MessageType, any>>) => Observable<JupyterMessage<MessageType, any>>;
/**
 * Create an object that adheres to the jupyter notebook specification.
 * http://jupyter-client.readthedocs.io/en/latest/messaging.html
 *
 * @param msg Message that has content which can be converted to nbformat
 *
 * @returns Message with the associated output type
 */
export declare const convertOutputMessageToNotebookFormat: (msg: JupyterMessage<MessageType, any>) => any;
/**
 * Convert raw Jupyter messages that are output messages into nbformat style
 * outputs
 *
 * > o$ = iopub$.pipe(
 *     childOf(originalMessage),
 *     outputs()
 *   )
 */
export declare const outputs: () => (source: Observable<JupyterMessage<MessageType, any>>) => Observable<any>;
/**
 * Get all messages for updating a display output.
 */
export declare const updatedOutputs: () => (source: Observable<JupyterMessage<MessageType, any>>) => Observable<any>;
/**
 * Get all the payload message content from an observable of jupyter messages
 *
 * > p$ = shell$.pipe(
 *     childOf(originalMessage),
 *     payloads()
 *   )
 */
export declare const payloads: () => (source: Observable<JupyterMessage<MessageType, any>>) => Observable<PayloadMessage>;
/**
 * Get all the execution counts from an observable of jupyter messages
 */
export declare const executionCounts: () => (source: Observable<JupyterMessage<MessageType, any>>) => Observable<any>;
/**
 * Get all statuses of all running kernels.
 */
export declare const kernelStatuses: () => (source: Observable<JupyterMessage<MessageType, any>>) => Observable<any>;
export * from "./messages";
