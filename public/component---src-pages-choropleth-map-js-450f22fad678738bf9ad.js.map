{"version":3,"sources":["webpack:///./src/components/SectionLogoWithOverlay.js","webpack:///./src/components/ChartImage.js","webpack:///./src/pages/choropleth-map.js","webpack:///./src/components/ChartFamilySection.js"],"names":["generalList","chartTypesInfo","filter","info","family","map","logo","SectionLogoWithOverlay","chartType","caption","link","isGeneralFamily","includes","to","className","allGifs","ChartImage","imgName","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","Choropleth","title","isTocEnabled","description","id","style","margin","padding","size","src","border","width","height","chartFamily","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","flow","general","ChartFamilySection","allLogos","chart","fullUrlToInternalLink","pythonURL","key","xs","md","label"],"mappings":"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","file":"component---src-pages-choropleth-map-js-450f22fad678738bf9ad.js","sourcesContent":["import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport Button from \"react-bootstrap/Button\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/choropleth.html'>choropleth map</a> displays divided geographical areas or regions that are coloured in relation to a numeric variable. This section explains how to build static choropleth with <code>geopandas</code> and <code>geoplot</code>, and interactive versions with tools like <code>folium</code> and <code>plotly</code>.</p>\";\n\nexport default function Choropleth() {\n\n  return (\n\n    <Layout title=\"Choropleth map\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Choropleth map\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Geopandas & Geoplot\">Choropleth map with <code>Geopandas</code> and <code>GeoPlot</code></h2>\n        <p>\n          <code>Geoplot</code> is a python library for geospatial data visualization. It works pretty well with <code>geopandas</code>, another\n          library made to deal with geospatial data objects.\n        </p>\n        <p><code>Geoplot</code> has a <code>choropleth()</code> function that allows to build a choropleth map easily as shown in the example below.</p>\n        <div style={{ margin: \"0 auto\", padding: 0 }}>\n          <Link to='/choropleth-map-geopandas-python'>\n            <ChartImage imgName={'choropleth-map-geopandas-python'} caption={'Choropleth map of US counties with Python, Geopandas and Geoplot'} />\n          </Link>\n        </div>\n        <Link to='/choropleth-map-geopandas-python'>\n          <Button size=\"xl\">\n            Read post\n        </Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Folium\"><code>Folium</code> for google maps style choropleth maps</h2>\n        <p>\n          <code>Folium</code> is a wrapper of the <code>Leaflet.js</code> javascript library. It brings the power of javascript for data visualization, but still allows to\n          do some data wrangling with Python. Building a choropleth with <code>Folium</code> is quite straightforward thanks to the\n          <code>choropleth()</code> function.\n        </p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/292-choropleth-map-with-folium.html\" title=\"Folium choropleth map\" style={{ border: \"none\", width: '800px', height: '430px' }}></iframe>\n        </div>\n        <Link to='/292-choropleth-map-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\"><code>Plotly</code> for interactive choropleth maps</h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/choropleth-map-plotly-python.html\" title=\"parallel coordinate chart with plotly\" style={{ border: \"none\", width: '800px', height: '500px' }}></iframe>\n        </div>\n        <Link to=\"/choropleth-map-plotly-python\">\n          <Button size=\"sm\">\n            See code\n          </Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}