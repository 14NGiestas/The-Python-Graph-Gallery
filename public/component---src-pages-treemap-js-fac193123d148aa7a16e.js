(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{"2mCb":function(e,a,t){},"59G+":function(e,a,t){"use strict";t.d(a,"a",(function(){return c}));var n=t("q1tI"),l=t.n(n),r=t("eynx"),i=t("JI6e"),o=t("Wbzz");function c(e){var a=e.imgName,t=e.caption,n=e.linkTo;return l.a.createElement(i.a,{xs:12,md:4},l.a.createElement(o.a,{to:n},l.a.createElement(r.a,{imgName:a,caption:t})))}},QTHd:function(e,a,t){"use strict";t.r(a),t.d(a,"default",(function(){return b}));var n=t("q1tI"),l=t.n(n),r=t("4/Vk"),i=t("7oih"),o=t("7vrA"),c=t("6+GL"),m=t("3Z9Z"),s=t("59G+"),u=t("pJaR"),p=t("Wbzz"),d=t("Hrqu"),h=t("eynx"),f=t("JI6e"),E=t("cWnB"),g=t("ZJrt"),y=t("gMBH");function b(){return l.a.createElement(i.a,{title:"Treemap",isTocEnabled:!0},l.a.createElement(r.a,{title:"Treemap",description:"<p>A <a href='https://www.data-to-viz.com/graph/treemap.html'>treemap</a> displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. In <code>Python</code>, the <code>squarify</code> library allows to compute the rectangle positions and plot it.</p>"}),l.a.createElement(o.a,null,l.a.createElement("h2",{id:"Quick"},"‚è± Quick start"),l.a.createElement(m.a,{className:"align-items-center"},l.a.createElement(f.a,{md:6},l.a.createElement("p",null,"A ",l.a.createElement("code",null,"treemap")," displays each element of a dataset as a rectangle. It allows to see what proportion each element has compared to the whole."),l.a.createElement("p",null," This is doable with ",l.a.createElement("code",null,"python")," and ",l.a.createElement("code",null,"Matplotlib")," thanks to the ",l.a.createElement("code",null,"squarify")," library that can be used as follow:üî•")),l.a.createElement(f.a,{md:6},l.a.createElement(p.a,{to:"/200-basic-treemap-with-python"},l.a.createElement(h.a,{imgName:"200_Basic_Treemap_with_squarify",caption:"Most basic Treemap with Python, Matplotlib and Squarify"})))),l.a.createElement(g.a,null,"# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\n\n# Create a data frame with fake data\ndf = pd.DataFrame({'nb_people':[8,3,4,2], 'group':[\"group A\", \"group B\", \"group C\", \"group D\"] })\n\n# plot it\nsquarify.plot(sizes=df['nb_people'], label=df['group'], alpha=.8 )\nplt.axis('off')\nplt.show()\n")),l.a.createElement(y.a,null),l.a.createElement("div",{className:"greySection",id:"related"},l.a.createElement(o.a,null,l.a.createElement("h2",{id:"Squarify"},"‚Ñπ Ô∏è A note on the ",l.a.createElement("code",null,"Squarify")," package"),l.a.createElement("p",null,"The squarify library is a pure Python implementation of the squarify treemap layout algorithm. It is a project developped by ",l.a.createElement("a",{href:"https://github.com/laserson"},"Uri Laserson")," that has its documentation on ",l.a.createElement("a",{href:"https://github.com/laserson/squarify"},"github"),"."),l.a.createElement("a",{href:"https://github.com/laserson/squarify"},l.a.createElement(E.a,{size:"sm"},"Squarify documentation")))),l.a.createElement(y.a,null),l.a.createElement(o.a,null,l.a.createElement("h2",{id:"Matplotlib"},l.a.createElement(d.b,null),"Treemap with ",l.a.createElement("code",null,"Matplotlib")," and ",l.a.createElement("code",null,"Squarify")),l.a.createElement("p",null,l.a.createElement("code",null,"Matplotlib")," is probably the most famous and flexible python library for data visualization. It is appropriate to build any kind of chart, including the lollipop plot thanks to its ",l.a.createElement("code",null,"stem()")," function."),l.a.createElement(m.a,null,l.a.createElement(s.a,{imgName:"201_Custom_Treemap1",caption:"How to control the color of your treemap",linkTo:"/201-control-the-color-of-treemap"}),l.a.createElement(s.a,{imgName:"202_Treemap_map_color_to_size",caption:"How to make the rectangle colors relative to their values.",linkTo:"/202-treemap-with-colors-mapped-on-values"}))),l.a.createElement(y.a,null),l.a.createElement("div",{className:"greySection",id:"related"},l.a.createElement(o.a,null,l.a.createElement(u.a,{chartFamily:"partOfAWhole"}))),l.a.createElement(y.a,null),l.a.createElement(o.a,null,l.a.createElement(c.a,null)),l.a.createElement(y.a,null))}},eynx:function(e,a,t){"use strict";t.d(a,"a",(function(){return m}));t("2mCb");var n=t("q1tI"),l=t.n(n),r=t("Wbzz"),i=t("9eSz"),o=t.n(i),c=["animated_chart","animated_gapminder.gif","animated_volcano.gif"];function m(e){var a=e.imgName,t=e.caption;if(c.includes(a))return l.a.createElement("p",null,"TODO");var n=Object(r.c)("3289484431").allFile.edges.find((function(e){return e.node.name.includes(a)}));return n?l.a.createElement(l.a.Fragment,null,l.a.createElement("div",{className:"chartImageContainer"},l.a.createElement(o.a,{alt:a,fluid:n.node.childImageSharp.fluid,className:"chartImageImg"}),l.a.createElement("div",{className:"chartImageOverlay"},l.a.createElement("div",{className:"chartImageOverlayText"},l.a.createElement("p",null,t))))):null}},gMBH:function(e,a,t){"use strict";t.d(a,"a",(function(){return r}));var n=t("q1tI"),l=t.n(n);function r(){return l.a.createElement("div",{className:"spacing",style:{height:140}})}}}]);
//# sourceMappingURL=component---src-pages-treemap-js-fac193123d148aa7a16e.js.map