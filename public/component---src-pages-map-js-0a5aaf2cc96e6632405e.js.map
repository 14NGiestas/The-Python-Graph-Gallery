{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/map.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/Spacing.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","BackgroundMap","title","isTocEnabled","description","id","className","style","maxWidth","margin","padding","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","Spacing","height"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,oOA+Be,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,iBAAiBC,cAAY,GAEzC,kBAAC,IAAD,CACED,MAAM,iBACNE,YAvBN,uMA0BI,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKP,GAAI,GACP,2JACA,4BACE,mCAAQ,gDAAR,aACA,mCAAQ,6CAAR,qCAAkE,kBAAC,IAAD,CAAMC,GAAG,sBAAT,gBAAlE,aAGJ,kBAAC,IAAD,CAAKD,GAAI,GACP,kBAAC,IAAD,CAAMC,GAAI,yBACR,kBAAC,IAAD,CAAYL,QAAQ,uBAClBC,QAAQ,yEAIhB,kBAAC,IAAD,KAzCO,uKA4CT,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,UAAP,mBAAgC,yCAChC,2BACE,wCADF,qCACuD,4CADvD,uDACkI,wCADlI,gDACkM,4CADlM,WACiO,kBAAC,IAAD,CAAML,GAAG,mCAAT,QADjO,qCAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEL,QAAQ,uBACRC,QAAQ,oEACRC,OAAO,0BAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,mCACRC,OAAO,4BAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,qBACRC,OAAO,6BAGX,yBAAKU,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,kBAAC,IAAD,CAAMV,GAAG,mCACP,kBAAC,IAAD,CAAYL,QAAS,yBAA0BC,QAAS,mCAK9D,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,WAAP,uBAAqC,0CACrC,2BACE,yCADF,6DACgF,wCADhF,8JAKA,yBAAKE,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,kBAAC,IAAD,CAAMV,GAAG,gCACP,kBAAC,IAAD,CAAYL,QAAS,8BAA+BC,QAAS,+CAKnE,kBAAC,IAAD,MAEA,yBAAKU,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBM,YAAY,UAIpC,kBAAC,IAAD,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC5HN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBlB,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIgB,EAAQE,SAASnB,GACnB,OACE,mCAGJ,IAuBMoB,EAvBOC,YAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASnB,MAG9B,OAAKoB,EAKH,oCACE,yBAAKT,UAAU,uBACb,kBAAC,IAAD,CACEiB,IAAK5B,EACL6B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClClB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIV,OAbL,O,kCC7CX,2DAEe,SAAS8B,IAEtB,OAAQ,yBAAKpB,UAAU,UAAUC,MAAO,CAAEoB,OAAQ","file":"component---src-pages-map-js-0a5aaf2cc96e6632405e.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>This section is dedicated to background maps. It explains what are the main ways to build them with Python. It is the foundation of the next sections that will add some data on top of it.</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny=[1,4,6,8,4]\n\n# Area plot\nplt.fill_between(x, y)\nplot.show()\n`\n\nexport default function BackgroundMap() {\n\n  return (\n\n    <Layout title=\"Background Map\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Background Map\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>There are 2 main ways to build an area chart with Matplotlib. In both case it requires 2 numeric vectors of values as input.</p>\n            <ul>\n              <li>The <code>fill_between()</code> function</li>\n              <li>The <code>stackplot()</code> function that is more useful for <Link to='/stacked-area-plot'>stacked area</Link> charts</li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/240-basic-area-chart\"}>\n              <ChartImage imgName=\"240_basic_area_chart\"\n                caption=\"The most basic area chart one can make with python and matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Folium\">Area chart with <code>Folium</code></h2>\n        <p>\n          <code>Folium</code> is a Python library wrapping the <code>Leaflet.js</code> library. It allows to easily manage your data with <code>python</code> and make interactive map using the power of <code>Javascript</code>. Click <Link to='/288-map-background-with-folium'>here</Link> to see the code of these 4 maps.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"240_basic_area_chart\"\n            caption=\"The most basic area chart one can make with python and matplotlib\"\n            linkTo=\"/240-basic-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"241_custom_area_chart1\"\n            caption=\"Control chart color (Matplotlib)\"\n            linkTo=\"/241-improve-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"241_custom_area_chart2\"\n            caption=\"Control line color\"\n            linkTo=\"/241-improve-area-chart\"\n          />\n        </Row>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/243-area-chart-with-white-grid'>\n            <ChartImage imgName={'243_another_area_chart'} caption={'Area chart with custom grid'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Basemap\">Background map with <code>Basemap</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/242-area-chart-and-faceting'>\n            <ChartImage imgName={'242_area_chart_and_faceting'} caption={'Area chart with small multiple, seaborn'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function Spacing() {\n\n  return (<div className=\"spacing\" style={{ height: 140 }}></div>)\n\n}\n"],"sourceRoot":""}