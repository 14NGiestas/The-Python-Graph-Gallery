{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/streamchart.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","StackedAreaPlot","title","isTocEnabled","description","id","size","className","style","maxWidth","margin","padding","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,oOAmBe,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,cAAcC,cAAY,GAEtC,kBAAC,IAAD,CACED,MAAM,cACNE,YAVN,mTAaI,kBAAC,IAAD,KACE,wBAAIC,GAAG,cAAa,kBAAC,IAAD,MAApB,oBAAmD,6CACnD,2BACE,4CADF,gHAIA,wEAA6C,kBAAC,IAAD,CAAML,GAAG,sBAAT,sBAA7C,SAA0G,0CAA1G,qBAAiJ,6CAAjJ,uLAE8D,mDAF9D,aAIA,kBAAC,IAAD,CAAMA,GAAG,iCACP,kBAAC,IAAD,CAAQM,KAAK,MAAb,cAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEX,QAAQ,+BACRC,QAAQ,gCACRC,OAAO,oCAKb,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIQ,GAAG,UAAP,oBAAiC,yCACjC,4FAGA,+CACmB,wCADnB,kBACqD,0CADrD,6DAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,QAAQ,2BACRC,QAAQ,2CACRC,OAAO,yCAKb,kBAAC,IAAD,MAEA,yBAAKU,UAAU,cAAcF,GAAG,OAC9B,kBAAC,IAAD,KACE,wBAAIA,GAAG,cAAP,yCACA,+DACmC,6CADnC,gBACwE,4CADxE,SAEE,0CAFF,uHAKA,kBAAC,IAAD,CAAML,GAAG,gDACP,kBAAC,IAAD,CAAQM,KAAK,MAAb,cAEF,yBAAKE,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,kBAAC,IAAD,CAAMX,GAAG,gDACP,kBAAC,IAAD,CAAYL,QAAS,sCAAuCC,QAAS,uDAM7E,kBAAC,IAAD,MAEA,yBAAKW,UAAU,cAAcF,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBO,YAAY,gBAIpC,kBAAC,IAAD,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC5GN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBnB,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIiB,EAAQE,SAASpB,GACnB,OACE,mCAGJ,IAuBMqB,EAvBOC,YAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASpB,MAG9B,OAAKqB,EAKH,oCACE,yBAAKT,UAAU,uBACb,kBAAC,IAAD,CACEiB,IAAK7B,EACL8B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClClB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIX,OAbL","file":"component---src-pages-streamchart-js-d86a937aa6e965b48f36.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/streamgraph.html'>streamgraph</a> is a variation of the stacked area graph. It displays the evolution of a numeric value for several groups. Each group is displayed around a central axis and edges are rounded resulting in a flowing and organic shape.</p>\";\n\nexport default function StackedAreaPlot() {\n\n  return (\n\n    <Layout title=\"Streamgraph\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Streamgraph\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Streamgraph with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> can build streamgraphs but there isn't any prebuilt function for it\n          so be ready for quite a lot of code. &#127871;\n        </p>\n        <p>The process starts pretty much like for a <Link to='/stacked-area-plot'>stacked area graph</Link>. The <code>baseline</code> parameter of the <code>stackplot()</code> function\n          is used to place groups around the X axis. The tricky part is to interpolate points between each value of the\n          X axis to get the smooth visual. This is done thanks to the <code>scipy.interpolate</code> library.\n        </p>\n        <Link to='/streamchart-basic-matplotlib'>\n          <Button size=\"sm\">Read more</Button>\n        </Link>\n        <Row>\n          <ChartImageContainer\n            imgName=\"250_basic_stacked_area_chart\"\n            caption=\"Most basic stacked area chart\"\n            linkTo=\"/250-basic-stacked-area-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Altair\">Streamgraph with <code>Altair</code></h2>\n        <p>\n          Altair is a lesser know python library for datavizualization.\n        </p>\n        <p>\n          Fortunately, the <code>pandas</code> library has a <code>divide()</code> function that\n          allows to apply this normalization easily.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"streamchart-basic-altair\"\n            caption=\"Basic streamgraph with Altair and Python\"\n            linkTo=\"/255-percentage-stacked-area-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"tip\">\n        <Container>\n          <h2 id=\"Workaround\">&#128161; Stacked area chart as a workaround</h2>\n          <p>\n            It is important to note that the <code>stackplot()</code> function of <code>matplotlib</code> has a\n            <code>baseline</code> parameter. This parameter controls how groups are displayed around\n            the x axis, what allows to mimic a streamgraph.\n          </p>\n          <Link to='/252-baseline-options-for-stacked-area-chart'>\n            <Button size=\"sm\">Read more</Button>\n          </Link>\n          <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n            <Link to='/252-baseline-options-for-stacked-area-chart'>\n              <ChartImage imgName={'252_baseline_and_stacked_area_chart'} caption={'It is hard to see how the green group evolves.'} />\n            </Link>\n          </div>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}