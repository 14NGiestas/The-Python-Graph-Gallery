{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/lollipop-plot.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/Spacing.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","Heatmap","title","isTocEnabled","description","id","className","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","Spacing","style","height"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,oOAkCe,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,iBAAiBC,cAAY,GAEzC,kBAAC,IAAD,CACED,MAAM,gBACNE,YAzBN,wcA4BI,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKP,GAAI,GACP,gCAAK,+CAAL,kEAEA,mDAAwB,wCAAxB,QAAgD,4CAAhD,kBACI,wCADJ,oDAIF,kBAAC,IAAD,CAAKA,GAAI,GACP,kBAAC,IAAD,CAAMC,GAAI,4BACR,kBAAC,IAAD,CAAYL,QAAQ,0BAClBC,QAAQ,0DAIhB,kBAAC,IAAD,KA1CO,oWA6CT,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,cAAa,kBAAC,IAAD,MAApB,sBAAqD,6CACrD,2BACE,4CADF,4KAG8B,wCAH9B,cAKA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,QAAQ,yBACRC,QAAQ,0EACRC,OAAO,6BAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,4DACRC,OAAO,8BAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,qCACRC,OAAO,8BAET,kBAAC,IAAD,CACEF,QAAQ,4BACRC,QAAQ,oDACRC,OAAO,gCAET,kBAAC,IAAD,CACEF,QAAQ,wCACRC,QAAQ,gDACRC,OAAO,uCAET,kBAAC,IAAD,CACEF,QAAQ,iCACRC,QAAQ,+EACRC,OAAO,qCAET,kBAAC,IAAD,CACEF,QAAQ,0CACRC,QAAQ,0CACRC,OAAO,gDAKb,kBAAC,IAAD,MAEA,yBAAKS,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBE,YAAY,cAIpC,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC/HN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBd,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIY,EAAQE,SAASf,GACnB,OACE,mCAGJ,IAuBMgB,EAvBOC,YAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASf,MAG9B,OAAKgB,EAKH,oCACE,yBAAKL,UAAU,uBACb,kBAAC,IAAD,CACEa,IAAKxB,EACLyB,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClCd,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIV,OAbL,O,kCC7CX,2DAEe,SAAS0B,IAEtB,OAAQ,yBAAKhB,UAAU,UAAUiB,MAAO,CAAEC,OAAQ","file":"component---src-pages-lollipop-plot-js-b2f6ea64f89136c6d0eb.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/lollipop.html'>lollipop chart</a> is an alernative to the more usual <a href='https://www.python-graph-gallery.com/barplot'>barplot</a>. <code>Python</code> allows to build lollipops thanks to the <code>matplotlib</code> library, as shown in the examples below. The strategy here is to use the <code>stem()</code> function or to hack the <code>vline()</code> function depending on your input format.</p>\";\n\n\nconst quickCode = `# Create a dataframe\nimport pandas as pd\ndf = pd.DataFrame({'group':list(map(chr, range(65, 85))), 'values':np.random.uniform(size=20) })\n\n# Reorder it following the values:\nordered_df = df.sort_values(by='values')\nmy_range=range(1,len(df.index)+1)\n\n# Make the plot\nplt.stem(ordered_df['values'])\nplt.xticks( my_range, ordered_df['group'])\n`\n\n\nexport default function Heatmap() {\n\n  return (\n\n    <Layout title=\"Lollipop chart\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Lollipop plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>A <code>lollipop plot</code> displays each element of a dataset as a segment and a\n            circle.</p>\n            <p> This is doable with <code>python</code> and <code>Matplotlib</code> thanks to\n            the <code>stem()</code> function\n            that accepts a data frame as input.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/180-basic-lollipop-plot\"}>\n              <ChartImage imgName=\"180_Basic_lolipop_plot2\"\n                caption=\"Most basic lollipop plot with Python & Matplotlib.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Lollipop plot with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible python library for data visualization.\n          It is appropriate to build any kind of chart, including the\n          lollipop plot thanks to its <code>stem()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"180_Basic_lolipop_plot\"\n            caption=\"Most basic lollipop. Will get you started with any kind of input format\"\n            linkTo=\"/180-basic-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"181_custom_lolliplot_2\"\n            caption=\"Basic circle customizations: shape, size, color and more.\"\n            linkTo=\"/181-custom-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"181_custom_lolliplot_3\"\n            caption=\"Change lollipop baseline position.\"\n            linkTo=\"/181-custom-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"182_vertical_lolipop_plot\"\n            caption=\"Horizontal lollipop chart (more readable labels).\"\n            linkTo=\"/182-vertical-lollipop-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"183_highlight_a_group_in_lolipop_plot\"\n            caption=\"Highlight some specific groups in a lollipop.\"\n            linkTo=\"/183-highlight-a-group-in-lollipop\"\n          />\n          <ChartImageContainer\n            imgName=\"184_lolipop_plot_with_2_groups\"\n            caption=\"Cleveland chart: a lollipop chart with 2 subgroups displayed under each row.\"\n            linkTo=\"/184-lollipop-plot-with-2-groups\"\n          />\n          <ChartImageContainer\n            imgName=\"185_lolipop_plot_with_conditional_color\"\n            caption=\"Lollipop chart with conditional colors.\"\n            linkTo=\"/185-lollipop-plot-with-conditional-color\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function Spacing() {\n\n  return (<div className=\"spacing\" style={{ height: 140 }}></div>)\n\n}\n"],"sourceRoot":""}