{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/Spacing.js","webpack:///./node_modules/react-bootstrap/esm/ToggleButton.js","webpack:///./node_modules/react-bootstrap/esm/ButtonGroup.js","webpack:///./src/pages/matplotlib.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","Spacing","style","height","noop","ToggleButton","forwardRef","_ref","ref","children","checked","type","onChange","value","disabled","inputRef","props","_useState","focused","setFocused","handleFocus","e","target","tagName","handleBlur","createElement","undefined","active","as","autoComplete","onFocus","onBlur","displayName","ButtonGroup","bsPrefix","size","toggle","vertical","_ref$as","Component","rest","prefix","baseClass","defaultProps","role","allStyle","LinePlot","React","useState","selectedParameter","setSelectedParameter","allStyleButtons","map","item","i","key","variant","currentTarget","title","isTocEnabled","description","id","href","maxWidth","margin","padding","chartFamily"],"mappings":"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","file":"component---src-pages-matplotlib-js-df645632db6b96dccf36.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function Spacing() {\n\n  return (<div className=\"spacing\" style={{ height: 140 }}></div>)\n\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback, useState } from 'react';\nimport Button from './Button';\n\nvar noop = function noop() {\n  return undefined;\n};\n\nvar ToggleButton = React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n      name = _ref.name,\n      className = _ref.className,\n      checked = _ref.checked,\n      type = _ref.type,\n      onChange = _ref.onChange,\n      value = _ref.value,\n      disabled = _ref.disabled,\n      inputRef = _ref.inputRef,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\", \"name\", \"className\", \"checked\", \"type\", \"onChange\", \"value\", \"disabled\", \"inputRef\"]);\n\n  var _useState = useState(false),\n      focused = _useState[0],\n      setFocused = _useState[1];\n\n  var handleFocus = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(true);\n  }, []);\n  var handleBlur = useCallback(function (e) {\n    if (e.target.tagName === 'INPUT') setFocused(false);\n  }, []);\n  return /*#__PURE__*/React.createElement(Button, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, focused && 'focus', disabled && 'disabled'),\n    type: undefined,\n    active: !!checked,\n    as: \"label\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    name: name,\n    type: type,\n    value: value,\n    ref: inputRef,\n    autoComplete: \"off\",\n    checked: !!checked,\n    disabled: !!disabled,\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    onChange: onChange || noop\n  }), children);\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  vertical: false,\n  toggle: false,\n  role: 'group'\n};\nvar ButtonGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      toggle = _ref.toggle,\n      vertical = _ref.vertical,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      rest = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"toggle\", \"vertical\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  var baseClass = prefix;\n  if (vertical) baseClass = prefix + \"-vertical\";\n  return /*#__PURE__*/React.createElement(Component, _extends({}, rest, {\n    ref: ref,\n    className: classNames(className, baseClass, size && prefix + \"-\" + size, toggle && prefix + \"-toggle\")\n  }));\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;","\nimport React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { ButtonGroup, Col, ToggleButton } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p><code>Matplotlib</code> is the most famous library for data visualization with <code>python</code>. It allows to create literally every type of chart with a great level of customization. This page provides some general tips that can be applied on any kind of chart made with <code>matplotlib</code> like customizing titles or colors. If you're looking at creating a specific chart type, visit <a href='https://www.python-graph-gallery.com'>the gallery</a> instead.</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny=[1,4,6,8,4]\n\n# Area plot\nplt.fill_between(x, y)\nplot.show()\n`\n\nconst allStyle = ['seaborn-darkgrid', 'seaborn-notebook', 'classic', 'seaborn-ticks', 'grayscale', 'bmh', 'seaborn-talk', 'dark_background', 'ggplot', 'fivethirtyeight', '_classic_test', 'seaborn-colorblind', 'seaborn-deep', 'seaborn-whitegrid', 'seaborn-bright', 'seaborn-poster', 'seaborn-muted', 'seaborn-paper', 'seaborn-white', 'seaborn-pastel', 'seaborn-dark', 'seaborn', 'seaborn-dark-palette']\n\n\nexport default function LinePlot() {\n\n  const [selectedParameter, setSelectedParameter] = React.useState(allStyle[0])\n\n  const allStyleButtons = allStyle.map(\n    (item, i) =>\n      <ToggleButton\n        type=\"radio\"\n        active={true}\n        key={i}\n        className={\"functionButton\"}\n        variant=\"secondary\"\n        size=\"sm\"\n        value={item}\n        checked={selectedParameter === item}\n        onChange={(e) => setSelectedParameter(e.currentTarget.value)}\n      >\n        {item}\n      </ToggleButton>\n  )\n\n  return (\n\n    <Layout title=\"Matplotlib\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Matplotlib\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>There are 2 main ways to build an area chart with Matplotlib. In both case it requires 2 numeric vectors of values as input.</p>\n            <ul>\n              <li>The <code>fill_between()</code> function</li>\n              <li>The <code>stackplot()</code> function that is more useful for <Link to='/stacked-area-plot'>stacked area</Link> charts</li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/240-basic-area-chart\"}>\n              <ChartImage imgName=\"240_basic_area_chart\"\n                caption=\"The most basic area chart one can make with python and matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Lexicon\"><Matplotlib />Basic vocabulary</h2>\n        <p>\n          The figure below describes the anatomy of a <code>matplotlib</code> charts. It names all the main components,\n          names that you need to know to understand the documentation properly.\n        </p>\n        <p>\n          &#9888;&#65039; <u>Disclaimer</u>: this figure comes from the very complete <a href='https://matplotlib.org/faq/usage_faq.html#coding-styles'>matplotlib documentation</a>. Have a look at it\n          for a thorough explanation on how this library works.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <ChartImage imgName={'matplotlib_vocabulary'} caption={'Anatomy of a matplotlib chart: all the basic vocabulary you need to know to understand the documentation properly'} />\n        </div>\n        <a href='https://matplotlib.org/faq/usage_faq.html#coding-styles'>\n          <Button size=\"sm\">Matplotlib doc</Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Title\"><Matplotlib />Customizing titles</h2>\n        <p>\n          The title is a key part of a good chart. It has to <u>summarize</u> its key message in a few words. Always avoid to simply\n          repeat what is displayed on each axis. Try to provide some more insight allowing to understand the main result instead.\n        </p>\n        <p>The <Link to='/190-custom-matplotlib-title'>post #190</Link> goes in depth on how to customize the <code>matplotlib</code>\n        title. All the main types of change are descried: changing\n        its color, adding a subtitle, using math formulas and so on. Give it a go!\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"190_Custom_title6\"\n            caption=\"Python chart with subtitle and custom color\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n          <ChartImageContainer\n            imgName=\"190_Custom_title7\"\n            caption=\"Add a math formula in title with Matplotlib\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n          <ChartImageContainer\n            imgName=\"190_Custom_title5\"\n            caption=\"Control the height of the matplotlib title\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Annotation\"><Matplotlib />Annotation</h2>\n        <p>\n          Annotation is a key part of a great visualization. It transforms a simple chart\n          in a whole piece of story telling. Before you share your graph with anyone,\n          make sure the key insight are highlighted with labels, shapes or color.\n        </p>\n        <p>\n          All those kind of annotation are built thanks to various matplotlib functions\n          like <code>annotate()</code> or <code>add_patch()</code>. The blogposts showcased below should get you started\n          with it.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"193_annotate1\"\n            caption=\"Add a label with a segment\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate2\"\n            caption=\"Add a square to highlight an area\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate3\"\n            caption=\"Add a circle to highlight an area\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate4\"\n            caption=\"Add a segment\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate5\"\n            caption=\"Add vertical and horizontal ablines\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"193_annotate6\"\n            caption=\"Annotate with an equation\"\n            linkTo=\"/193-annotate-matplotlib-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Margin\"><Matplotlib />Add margin around a <code>matplotlib</code> chart</h2>\n        <p>\n          It is a common struggle to deal with the margins around the chart. Fortunately this\n          is pretty straightforward thanks to the <code>subplots_adjust()</code> function as explained in the examples\n          below.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"192_increase_margin2\"\n            caption=\"Increase the bottom margin of a matplotlib chart.\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n          <ChartImageContainer\n            imgName=\"192_increase_margin4\"\n            caption=\"Increase the top margin to fit a title\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Subplot\"><Matplotlib />Split the figure in subplots</h2>\n        <p>\n          It can be really useful to split your graphic window in several\n          parts, in order to display several charts in the same time.\n          The <code>subplot()</code> function of <code>matplotlib</code> allows to\n          do it quickly with a great level of customization.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot4\"\n            caption=\"Split the figure in 4 charts of same size.\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Split the figure with a custom layout\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot9\"\n            caption=\"Manage chart size on subplots\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Theme\"><Matplotlib />Available style sheets</h2>\n        <p>\n          Matplotlib comes with a set of pre-built theme to style your chart easily.\n        </p>\n        <ButtonGroup size='sm' as='div' toggle>{allStyleButtons}</ButtonGroup>\n        <Link to='/199-matplotlib-style-sheets'>\n          <Button size=\"sm\">Read more</Button>\n        </Link>\n        <Row>\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot4\"\n            caption=\"Split the figure in 4 charts of same size.\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Split the figure with a custom layout\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot9\"\n            caption=\"Manage chart size on subplots\"\n            linkTo=\"/192-about-matplotlib-margins\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Axis\"><Matplotlib />Customizing axis</h2>\n        <p>\n          <code>Matplotlib</code> allows every kind of axis configuration. It is mainly done thanks\n          to the <code>tick_params()</code>, <code>xticks()</code> and <code>xlabels()</code> functions.\n          The <Link to='191-custom-axis-on-matplotlib-chart'>post #191</Link> will guide you through all the possibilities.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"191_Custom_axis1\"\n            caption=\"Change the axis title and its appearance\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"191_Custom_axis2\"\n            caption=\"Control axis labels and ticks look\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"191_Custom_axis6\"\n            caption=\"Control axis limit with the xlim() function\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"sourceRoot":""}