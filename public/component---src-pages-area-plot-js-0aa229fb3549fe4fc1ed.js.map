{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/area-plot.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","LinePlot","title","isTocEnabled","description","id","className","style","maxWidth","margin","padding","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,OAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,oOA+Be,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,aAAaC,cAAY,GAErC,kBAAC,IAAD,CACED,MAAM,aACNE,YAvBN,ieA0BI,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKP,GAAI,GACP,2JACA,4BACE,mCAAQ,gDAAR,aACA,mCAAQ,6CAAR,qCAAkE,kBAAC,OAAD,CAAMC,GAAG,sBAAT,gBAAlE,aAGJ,kBAAC,IAAD,CAAKD,GAAI,GACP,kBAAC,OAAD,CAAMC,GAAI,yBACR,kBAAC,IAAD,CAAYL,QAAQ,uBAClBC,QAAQ,yEAIhB,kBAAC,IAAD,KAzCO,uKA4CT,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,cAAa,kBAAC,IAAD,MAApB,mBAAkD,6CAClD,2BACE,4CADF,wDAC8E,gDAD9E,wGAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,QAAQ,uBACRC,QAAQ,oEACRC,OAAO,0BAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,mCACRC,OAAO,4BAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,qBACRC,OAAO,6BAGX,yBAAKU,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,kBAAC,OAAD,CAAMV,GAAG,mCACP,kBAAC,IAAD,CAAYL,QAAS,yBAA0BC,QAAS,mCAK9D,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,WAAU,kBAAC,IAAD,MAAjB,mBAA4C,0CAC5C,2BACE,yCADF,6DACgF,wCADhF,8JAKA,yBAAKE,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,kBAAC,OAAD,CAAMV,GAAG,gCACP,kBAAC,IAAD,CAAYL,QAAS,8BAA+BC,QAAS,+CAKnE,kBAAC,IAAD,MAEA,yBAAKU,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBM,YAAY,gBAIpC,kBAAC,IAAD,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC7HN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBlB,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIgB,EAAQE,SAASnB,GACnB,OACE,mCAGJ,IAuBMoB,EAvBOC,yBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASnB,MAG9B,OAAKoB,EAKH,oCACE,yBAAKT,UAAU,uBACb,kBAAC,IAAD,CACEiB,IAAK5B,EACL6B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClClB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIV,OAbL","file":"component---src-pages-area-plot-js-0aa229fb3549fe4fc1ed.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>An <a href='https://www.data-to-viz.com/graph/area.html'>area chart</a> is really similar to a <a href='http://python-graph-gallery.com/line-chart/'>line chart</a>, except that the area between the x axis and the line is filled in with color or shading. It represents the evolution of a numeric variable. This section starts by considering <code>matplotlib</code> and <code>seaborn</code> as tools to build area charts. It then shows a few other options for timeseries.</p>\";\n\nconst quickCode = `# library\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create data\nx=range(1,6)\ny=[1,4,6,8,4]\n\n# Area plot\nplt.fill_between(x, y)\nplot.show()\n`\n\nexport default function LinePlot() {\n\n  return (\n\n    <Layout title=\"Area chart\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Area Chart\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>There are 2 main ways to build an area chart with Matplotlib. In both case it requires 2 numeric vectors of values as input.</p>\n            <ul>\n              <li>The <code>fill_between()</code> function</li>\n              <li>The <code>stackplot()</code> function that is more useful for <Link to='/stacked-area-plot'>stacked area</Link> charts</li>\n            </ul>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/240-basic-area-chart\"}>\n              <ChartImage imgName=\"240_basic_area_chart\"\n                caption=\"The most basic area chart one can make with python and matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Area chart with <code>Matplotlib</code></h2>\n        <p>\n          <code>Matplotlib</code> is a great fit to build an area chart thanks to its <code>fill_between()</code> function. Here are a few examples explaining its basics\n          and how to apply some common customization.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"240_basic_area_chart\"\n            caption=\"The most basic area chart one can make with python and matplotlib\"\n            linkTo=\"/240-basic-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"241_custom_area_chart1\"\n            caption=\"Control chart color (Matplotlib)\"\n            linkTo=\"/241-improve-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"241_custom_area_chart2\"\n            caption=\"Control line color\"\n            linkTo=\"/241-improve-area-chart\"\n          />\n        </Row>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/243-area-chart-with-white-grid'>\n            <ChartImage imgName={'243_another_area_chart'} caption={'Area chart with custom grid'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Area chart with <code>Seaborn</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/242-area-chart-and-faceting'>\n            <ChartImage imgName={'242_area_chart_and_faceting'} caption={'Area chart with small multiple, seaborn'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}