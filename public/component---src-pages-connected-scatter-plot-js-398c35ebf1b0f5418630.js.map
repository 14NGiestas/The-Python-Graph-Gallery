{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/connected-scatter-plot.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","ConnectedScatter","title","isTocEnabled","seoDescription","description","id","className","href","size","style","maxWidth","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"8FAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,OAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,gPA8Be,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,wBAAwBC,cAAY,EAACC,eAAe,kHAEhE,kBAAC,IAAD,CACEF,MAAM,wBACNG,YAtBN,0ZAyBI,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKR,GAAI,GACP,uCAEF,kBAAC,IAAD,CAAKA,GAAI,GACP,kBAAC,OAAD,CAAMC,GAAI,oCACR,kBAAC,IAAD,CAAYL,QAAQ,uCAClBC,QAAQ,4DAIhB,kBAAC,IAAD,KApCO,2NAqCP,8BAGF,kBAAC,IAAD,MAEA,yBAAKW,UAAU,eACb,kBAAC,IAAD,KACE,wBAAID,GAAG,WAAP,yCACA,4GACA,kCACM,oCADN,gBAC+B,kBAAC,OAAD,CAAMN,GAAG,eAAT,YAD/B,kFAEgE,qCAFhE,8GAIA,+CAAoB,uBAAGQ,KAAK,2DAAR,eAApB,iBACA,uBAAGA,KAAK,2DACN,kBAAC,IAAD,CAAQC,KAAK,MAAb,gBAKN,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIH,GAAG,WAAU,kBAAC,IAAD,MAAjB,8BAAuD,0CACvD,oEACwC,yCADxC,yLAKA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEX,QAAQ,uCACRC,QAAQ,uDACRC,OAAO,uCAKb,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,cAAa,kBAAC,IAAD,MAApB,8BAA6D,6CAC7D,qCACS,kBAAC,OAAD,CAAMN,GAAG,kBAAT,gBADT,KACwD,4CADxD,uDAEU,+CAFV,uCAEwE,mCAFxE,yFAKA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEL,QAAQ,4BACRC,QAAQ,yDACRC,OAAO,0CAET,kBAAC,IAAD,CACEF,QAAQ,0BACRC,QAAQ,0CACRC,OAAO,+CAET,kBAAC,IAAD,CACEF,QAAQ,yBACRC,QAAQ,oDACRC,OAAO,+BAGX,6BACA,kEAAuC,4CAAvC,YAAuE,2CAAvE,eACA,yBAAKa,MAAO,CAAEC,SAAU,UACtB,kBAAC,OAAD,CAAMX,GAAI,iCACR,kBAAC,IAAD,CAAYL,QAAS,wBAAyBC,QAAS,uDAK7D,kBAAC,IAAD,MAGA,kBAAC,IAAD,KACE,wBAAIU,GAAG,cAAa,kBAAC,IAAD,MAApB,yCACA,wMAIA,yBAAKI,MAAO,CAAEC,SAAU,UACtB,kBAAC,OAAD,CAAMX,GAAI,wCACR,kBAAC,IAAD,CAAYL,QAAS,sCAAuCC,QAAS,kEAK3E,kBAAC,IAAD,MAEA,yBAAKW,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBM,YAAY,kBAIpC,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC9JN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBnB,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIiB,EAAQE,SAASpB,GACnB,OACE,mCAGJ,IAuBMqB,EAvBOC,yBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASpB,MAG9B,OAAKqB,EAKH,oCACE,yBAAKT,UAAU,uBACb,kBAAC,IAAD,CACEiB,IAAK7B,EACL8B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClClB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIX,OAbL","file":"component---src-pages-connected-scatter-plot-js-398c35ebf1b0f5418630.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>connected scatterplot</a> is a <a href='https://python-graph-gallery.com/line-chart/'>line chart</a> where each data point is shown by a circle or any type of marker. This section explains how to build a connected scatterplot with <code>Python</code>, using both the <code>Matplotlib</code> and the <code>Seaborn</code> libraries.</p>\";\n\nconst quickCode = `# library\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\n# Create a dataset\ndf = pd.DataFrame(np.random.random((5,5)), columns=[\"a\",\"b\",\"c\",\"d\",\"e\"])\n\n# Default heatmap\np1 = sns.heatmap(df)\n`\n\nexport default function ConnectedScatter() {\n\n  return (\n\n    <Layout title=\"Connected Scatterplot\" isTocEnabled seoDescription=\"A collection of connected scatterplot examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Connected Scatterplot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>TODO.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/132-basic-connected-scatterplot\"}>\n              <ChartImage imgName=\"132_Matplotlib-connected-scatterplot\"\n                caption=\"Basic connected scatterplot with Python and Seaborn.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Two types of connected scatterplot</h2>\n          <p>There are two types of connected scatterplot, and it often creates confusion.</p>\n          <p>\n            The <u>first</u> is simply a <Link to='/line-chart'>lineplot</Link> with dots added\n            on top of it. It takes as input 2 numeric variables only. The <u>second</u> shows the relationship\n            between 2 numeric variables across time. It requires 3 numeric variables as input.</p>\n          <p>Confusing? Visit <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>data-to-viz</a> to clarify..</p>\n          <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>\n            <Button size=\"sm\">Read more</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Connected scatterplot with <code>Seaborn</code></h2>\n        <p>\n          Building a connected scatterplot with <code>Seaborn</code> looks pretty much the same as for\n          a line chart, so feel free to visit the related section. Here are a few examples to remind the\n          basics and understand how to customize the markers.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"132_Matplotlib-connected-scatterplot\"\n            caption=\"Basic connected scatterplot with Python and Seaborn.\"\n            linkTo=\"/132-basic-connected-scatterplot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Connected scatterplot with <code>Matplotlib</code></h2>\n        <p>\n          As for <Link to='/scattter-plot'>scatterplots</Link>, <code>Matplotlib</code> will help us build a bubble plot thanks to\n          the the <code>plt.scatter()</code> function. This function provides a <code>s</code> parameter allowing\n          to pass a third variable that will be mapped to the markers size.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"106_seaborn_style_on_plt1\"\n            caption=\"Basic connected scatterplot with Python and Matplotlib\"\n            linkTo=\"/106-seaborn-style-on-matplotlib-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Connected scatterplot on a split window\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"How to customize line and markers with Matplotlib\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n        </Row>\n        <br />\n        <p>Cheatsheet: line customization with <code>Matplotlib</code> and the <code>linestyle</code> parameter.</p>\n        <div style={{ maxWidth: '350px' }}>\n          <Link to={\"/121-line-chart-customization\"}>\n            <ChartImage imgName={\"121_Custom_line_plot4\"} caption={'Cheat sheet: line customization with matplotlib'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Connected scatterplot for 2 variables</h2>\n        <p>\n          As explained above, a connected scatterplot can also be base on 3 numeric variables. It allows to\n          study the evolution of 2 variables (placed on the X and on the Y axis).\n        </p>\n        <div style={{ maxWidth: '550px' }}>\n          <Link to={\"/connected-scatterplot-for-evolution\"}>\n            <ChartImage imgName={\"connected-scatterplot-for-evolution\"} caption={'Connected scatterplot to show the evolution of 2 variables'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}