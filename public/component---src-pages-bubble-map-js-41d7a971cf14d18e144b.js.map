{"version":3,"sources":["webpack:///./src/pages/bubble-map.js","webpack:///./src/components/ChartImageContainer.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/Spacing.js"],"names":["BackgroundMap","title","isTocEnabled","description","className","id","to","size","imgName","caption","linkTo","src","style","border","width","height","margin","chartFamily","ChartImageContainer","xs","md","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","Spacing"],"mappings":"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","file":"component---src-pages-bubble-map-js-41d7a971cf14d18e144b.js","sourcesContent":["import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/bubblemap.html'>bubble map</a> uses circles of different size to represent a numeric value on a territory. It displays one bubble per geographic coordinate, or one bubble per region. As for <a href='https://python-graph-gallery.com/map/'>background maps</a>, several python libraries are useful to build them: <code>folium</code>, <code>geopandas</code>, <code>geoplot</code> and <code>basemap</code> are listed here.</p>\";\n\nexport default function BackgroundMap() {\n\n  return (\n\n    <Layout title=\"Bubble Map\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Bubble Map\"\n        description={chartDescription}\n      />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Overview\">ðŸ”Ž  Building maps with Python</h2>\n          <p>\n            If you're new to geospatial analysis with python, I strongly advise to check\n            the <Link to='/map'>background map section</Link> of the gallery. It gives a great overview of the\n            available tools, and help you pick the right one.\n          </p>\n          <Link to='/map'>\n            <Button size=\"sm\">Background Map Section</Button>\n          </Link>\n          <br /><br />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Geopandas & Geoplot\"><code>Geopandas</code> and <code>GeoPlot</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"map-read-geojson-with-python-geopandas\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/map-read-geojson-with-python-geopandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Folium\">Bubble map with <code>Folium</code></h2>\n        <p>\n          <code>Folium</code> is a wrapper of the <code>leaflet.js</code> javascript library. Once you understood\n          how to <Link to=\"/map\">initialize</Link> an interactive map with it, you can parse a data frame of coordinates\n          and add markers to the map with functions like <code>Circle()</code> and <code>..()</code>\n        </p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/313-bubble-map-with-folium.html\" title=\"Basic map with folium\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/313-bubble-map-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p>It is also possible to add any other kind of markers instead of circles. This is what you get with the default <code>folium.Marker()</code> function:</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/312-add-markers-on-folium-map.html\" title=\"Folium and markers\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/312-add-markers-on-folium-map'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p>And this is what you can build by passing some <code>html</code> to the marker and popup parameters:</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map1\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map2\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Basemap\">Bubble map with <code>Basemap</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <div style={{ margin: \"0 auto\" }}>\n          <Link to='/315-a-world-map-of-surf-tweets'>\n            <ChartImage imgName={'315_Tweet_Surf_Bubble_map1'} caption={'Bubble map with Python and the basemap library'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react'\n\nexport default function Spacing() {\n\n  return (<div className=\"spacing\" style={{ height: 140 }}></div>)\n\n}\n"],"sourceRoot":""}