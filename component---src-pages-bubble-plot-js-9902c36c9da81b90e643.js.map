{"version":3,"sources":["webpack:///./src/pages/bubble-plot.js","webpack:///./src/components/ChartImageContainer.js","webpack:///./src/components/ChartImage.js"],"names":["BubblePlot","title","isTocEnabled","seoDescription","description","id","className","md","to","imgName","caption","linkTo","chartFamily","ChartImageContainer","xs","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"uHAAA,oOAiCe,SAASA,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,cAAcC,cAAY,EAACC,eAAe,yGACtD,kBAAC,IAAD,CACEF,MAAM,cACNG,YAxBN,+XA2BI,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKC,GAAI,GACP,kCAAO,+CAAP,gBAA8C,yCAA9C,yDACiB,sCADjB,2FAIF,kBAAC,IAAD,CAAKA,GAAI,GACP,kBAAC,OAAD,CAAMC,GAAI,6BACR,kBAAC,IAAD,CAAYC,QAAQ,2BAClBC,QAAQ,mDAIhB,kBAAC,IAAD,KA1CO,2WA2CP,8BAGF,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIL,GAAG,WAAU,kBAAC,IAAD,MAAjB,oBAA6C,0CAC7C,2BACE,yCADF,wGAES,2CAFT,mHAKA,6EACiD,+CADjD,8KAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEI,QAAQ,2BACRC,QAAQ,8CACRC,OAAO,gCAKb,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIN,GAAG,cAAa,kBAAC,IAAD,MAApB,oBAAmD,6CACnD,qCACS,kBAAC,OAAD,CAAMG,GAAG,iBAAT,gBADT,KACuD,4CADvD,uDAEU,+CAFV,uCAEwE,mCAFxE,yFAKA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,QAAQ,wBACRC,QAAQ,oDACRC,OAAO,2BAET,kBAAC,IAAD,CACEF,QAAQ,iCACRC,QAAQ,mCACRC,OAAO,iCAET,kBAAC,IAAD,CACEF,QAAQ,iCACRC,QAAQ,mCACRC,OAAO,iCAET,kBAAC,IAAD,CACEF,QAAQ,iCACRC,QAAQ,kCACRC,OAAO,iCAET,kBAAC,IAAD,CACEF,QAAQ,iCACRC,QAAQ,oCACRC,OAAO,kCAGX,6HACiG,mCADjG,kGAIA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEF,QAAQ,oCACRC,QAAQ,wDACRC,OAAO,oCAET,kBAAC,IAAD,CACEF,QAAQ,wBACRC,QAAQ,uCACRC,OAAO,sCAKb,kBAAC,IAAD,MAEA,yBAAKL,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBO,YAAY,kBAIpC,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,oCC1JN,+FAMe,SAASC,EAAT,GAA4D,IAA7BJ,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKG,GAAI,GAAIP,GAAI,GACf,kBAAC,OAAD,CAAMC,GAAIG,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,sGAMMK,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBP,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIK,EAAQE,SAASR,GACnB,OACE,mCAGJ,IAuBMS,EAvBOC,yBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASR,MAG9B,OAAKS,EAKH,oCACE,yBAAKZ,UAAU,uBACb,kBAAC,IAAD,CACEoB,IAAKjB,EACLkB,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClCrB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAII,OAbL","file":"component---src-pages-bubble-plot-js-9902c36c9da81b90e643.js","sourcesContent":["import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/bubble.html'>bubble plot</a> is a <a href='https://www.python-graph-gallery.com/scatter-plot'>scatterplot</a> where the circle size is mapped to the value of a third numeric variable. This section shows many bubble plots made with <code>Python</code>, using both the <code>Matplotlib</code> and <code>Seaborn</code> libraries.</p>\";\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom gapminder import gapminder # data set\n\n# data\ndata = gapminder.loc[gapminder.year == 2007]\n\n# use the scatterplot function to build the bubble map\nsns.scatterplot(data=data, x=\"gdpPercap\", y=\"lifeExp\", size=\"pop\", legend=False, sizes=(20, 2000))\n\n# show the graph\nplt.show()\n`\n\nexport default function BubblePlot() {\n\n  return (\n\n    <Layout title=\"Bubble plot\" isTocEnabled seoDescription=\"A collection of bubble chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Bubble plot\"\n        description={chartDescription}\n      />\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>The <code>scatterplot()</code> function of <code>seaborn</code> also allows to build bubble charts.\n            Indeed, it has a <code>size</code> parameter that controls circle size according to a numeric\n            variable of the dataset.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/bubble-plot-with-seaborn\"}>\n              <ChartImage imgName=\"bubble-plot-with-seaborn\"\n                caption=\"Basic bubble chart with Python and Seaborn.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Bubble plot with <code>Seaborn</code></h2>\n        <p>\n          <code>Seaborn</code> is the best tool to quickly build a quality bubble chart. The example below are based on the\n          famous <code>gapminder</code> dataset that shows the relationship between gdp per capita, life expectancy and population\n          of world countries.\n        </p>\n        <p>\n          The examples below start simple by calling the <code>scatterplot()</code> function with the minimum set of parameters. It then show\n          how to change bubble colors to represent a fourth variable, improve general styling, tweak the legend and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"bubble-plot-with-seaborn\"\n            caption=\"Basic bubble chart with Python and Seaborn.\"\n            linkTo=\"/bubble-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Bubble plot with <code>Matplotlib</code></h2>\n        <p>\n          As for <Link to='/scatter-plot'>scatterplots</Link>, <code>Matplotlib</code> will help us build a bubble plot thanks to\n          the the <code>plt.scatter()</code> function. This function provides a <code>s</code> parameter allowing\n          to pass a third variable that will be mapped to the markers size.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"270_Basic_Bubble_plot\"\n            caption=\"Most basic bubble plot with Python and Matplotlib\"\n            linkTo=\"/270-basic-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization1\"\n            caption=\"Bubble plot customization: color\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization2\"\n            caption=\"Bubble plot customization: shape\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization3\"\n            caption=\"Bubble plot customization: size\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"271_Bubble_plot_customization4\"\n            caption=\"Bubble plot customization: stroke\"\n            linkTo=\"/271-custom-your-bubble-plot\"\n          />\n        </Row>\n        <p>\n          Note that it is a common practice to map a fourth variable to the markers colors thanks to the <code>c</code> parameter.\n          This way, you're now looking a 4 variables in the same time, on the same chart ðŸŽ‰.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"272_Bubble_plot_with_mapped_color\"\n            caption=\"A bubble chart width 4 dimensions: x, y, size & color\"\n            linkTo=\"/272-map-a-color-to-bubble-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"bubble-plot-gapminder\"\n            caption=\"Bubble plot of the gapminder dataset\"\n            linkTo=\"/341-python-gapminder-animation\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}