{"version":3,"sources":["webpack:///./src/components/SectionLogoWithOverlay.js","webpack:///./src/pages/bubble-map.js","webpack:///./src/components/ChartImageContainer.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/ChartFamilySection.js"],"names":["generalList","chartTypesInfo","filter","info","family","map","logo","SectionLogoWithOverlay","chartType","caption","link","isGeneralFamily","includes","to","className","BackgroundMap","title","isTocEnabled","description","id","size","imgName","linkTo","src","style","border","width","height","margin","chartFamily","ChartImageContainer","xs","md","allGifs","ChartImage","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","flow","general","ChartFamilySection","allLogos","chart","fullUrlToInternalLink","pythonURL","key","label"],"mappings":"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","file":"component---src-pages-bubble-map-js-034e045d9b815ce07571.js","sourcesContent":["import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/bubblemap.html'>bubble map</a> uses circles of different size to represent a numeric value on a territory. It displays one bubble per geographic coordinate, or one bubble per region. As for <a href='https://python-graph-gallery.com/map/'>background maps</a>, several python libraries are useful to build them: <code>folium</code>, <code>geopandas</code>, <code>geoplot</code> and <code>basemap</code> are listed here.</p>\";\n\nexport default function BackgroundMap() {\n\n  return (\n\n    <Layout title=\"Bubble Map\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Bubble Map\"\n        description={chartDescription}\n      />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Overview\">ðŸ”Ž  Building maps with Python</h2>\n          <p>\n            If you're new to geospatial analysis with python, I strongly advise to check\n            the <Link to='/map'>background map section</Link> of the gallery. It gives a great overview of the\n            available tools, and help you pick the right one.\n          </p>\n          <Link to='/map'>\n            <Button size=\"sm\">Background Map Section</Button>\n          </Link>\n          <br /><br />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Geopandas & Geoplot\"><code>Geopandas</code> and <code>GeoPlot</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"map-read-geojson-with-python-geopandas\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/map-read-geojson-with-python-geopandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Folium\">Bubble map with <code>Folium</code></h2>\n        <p>\n          <code>Folium</code> is a wrapper of the <code>leaflet.js</code> javascript library. Once you understood\n          how to <Link to=\"/map\">initialize</Link> an interactive map with it, you can parse a data frame of coordinates\n          and add markers to the map with functions like <code>Circle()</code> and <code>..()</code>\n        </p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/313-bubble-map-with-folium.html\" title=\"Basic map with folium\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/313-bubble-map-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p>It is also possible to add any other kind of markers instead of circles. This is what you get with the default <code>folium.Marker()</code> function:</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/312-add-markers-on-folium-map.html\" title=\"Folium and markers\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/312-add-markers-on-folium-map'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p>And this is what you can build by passing some <code>html</code> to the marker and popup parameters:</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map1\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map2\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Basemap\">Bubble map with <code>Basemap</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <div style={{ margin: \"0 auto\" }}>\n          <Link to='/315-a-world-map-of-surf-tweets'>\n            <ChartImage imgName={'315_Tweet_Surf_Bubble_map1'} caption={'Bubble map with Python and the basemap library'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}