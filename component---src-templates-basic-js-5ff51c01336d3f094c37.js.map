{"version":3,"sources":["webpack:///./src/components/SectionLogoWithOverlay.js","webpack:///./src/templates/basic.js","webpack:///./src/components/ChartFamilySection.js"],"names":["generalList","chartTypesInfo","filter","info","family","map","logo","SectionLogoWithOverlay","chartType","caption","link","isGeneralFamily","includes","to","className","Template","data","console","log","jupyterNotebook","metadata","title","description","slug","isTocEnabled","dangerouslySetInnerHTML","__html","html","chartFamily","hasGreyBackground","pageSlug","isNotebook","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","flow","general","ChartFamilySection","allLogos","chart","id","fullUrlToInternalLink","pythonURL","key","xs","md","label"],"mappings":"uHAAA,6FAMMA,EANN,UAMoBC,EACjBC,QAAO,SAAAC,GAAI,MAAoB,YAAhBA,EAAKC,UACpBC,KAAI,SAAAF,GAAI,OAAIA,EAAKG,QAEL,SAASC,EAAT,GAA+D,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAG7DC,EAAkBX,EAAYY,SAASJ,GAE7C,OACE,oCACKG,EAWC,oCACE,kBAAC,IAAD,CAAME,GAAIH,GACR,kBAAC,IAAD,CAAaF,UAAWA,KAE1B,uBAAGM,UAAU,0CAA0CL,IAfvC,oCACpB,yBAAKK,UAAU,wBACb,kBAAC,IAAD,CAAMD,GAAIH,GACR,kBAAC,IAAD,CAAaF,UAAWA,IACxB,yBAAKM,UAAU,sBACb,yBAAKA,UAAU,0BAAf,QAIN,uBAAGA,UAAU,0CAA0CL,O,oFC1B/D,0JAae,SAASM,EAAT,GAA6B,IAATC,EAAQ,EAARA,KACjCC,QAAQC,IAAI,OAAQF,GADqB,MAQrCA,EAAKG,gBAAgBC,SALvBC,EAHuC,EAGvCA,MACAC,EAJuC,EAIvCA,YACAlB,EALuC,EAKvCA,OACAI,EANuC,EAMvCA,UACAe,EAPuC,EAOvCA,KAEF,OACE,kBAAC,IAAD,CAAQF,MAAOA,EAAOG,cAAY,EAAChB,UAAWA,GAE5C,kBAAC,IAAD,CACEa,MAAOA,EACPC,YAAa,MAAQA,EAAc,OACnCd,UAAWA,IAIb,kBAAC,IAAD,KACE,yBACEM,UAAU,oBACVW,wBAAyB,CAAEC,OAAQV,EAAKG,gBAAgBQ,SAI5D,kBAAC,IAAD,MAEA,yBAAKb,UAAU,eACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBc,YAAaxB,EAAQyB,mBAAiB,MAI9D,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAASC,SAAUP,EAAMQ,YAAU,KAGrC,kBAAC,IAAD,S,kCCrDN,iIAQMC,EAAS,CACbC,aAAc,eACdC,YAAa,cACbC,QAAS,UACTC,aAAc,kBACdC,UAAW,YACXhC,IAAK,MACLiC,KAAM,OACNC,QAAS,qBAGI,SAASC,EAAT,GAA8C,IAAhBZ,EAAe,EAAfA,YACrCa,EAAWxC,IACdC,QAAO,SAACwC,GAAD,OAAWA,EAAMtC,SAAWwB,KACnCvB,KAAI,SAACqC,EAAOC,GACX,IAAMjC,EAAOkC,YAAsBF,EAAMG,WACzC,OACE,kBAAC,IAAD,CAAKC,IAAKH,EAAII,GAAI,EAAGC,GAAI,GACvB,kBAAC,IAAD,CACEtC,KAAMA,EACNF,UAAWkC,EAAMpC,KACjBG,QAASiC,EAAMO,YAMzB,OACE,6BACE,wBAAIN,GAAG,iBAAiB7B,UAAW,gBAAkBc,GAAcI,aAAnE,EAAmEA,EAASJ,IAC5E,kBAAC,IAAD,KAAMa","file":"component---src-templates-basic-js-5ff51c01336d3f094c37.js","sourcesContent":["import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import \"./basic.css\";\n\nimport React from \"react\";\nimport { graphql } from \"gatsby\";\nimport PropTypes from 'prop-types';\n\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport Contact from \"../components/Contact\";\nimport Spacing from \"../components/Spacing\";\n\nexport default function Template({ data }) {\n  console.log(\"data\", data)\n  const {\n    title,\n    description,\n    family,\n    chartType,\n    slug\n  } = data.jupyterNotebook.metadata;\n  return (\n    <Layout title={title} isTocEnabled chartType={chartType} >\n\n      <TitleAndDescription\n        title={title}\n        description={'<p>' + description + '</p>'}\n        chartType={chartType}\n      />\n\n      {/* Blog content */}\n      <Container>\n        <div\n          className=\"blog-post-content\"\n          dangerouslySetInnerHTML={{ __html: data.jupyterNotebook.html }}\n        />\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <ChartFamilySection chartFamily={family} hasGreyBackground />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact pageSlug={slug} isNotebook />\n      </Container>\n\n      <Spacing />\n\n    </Layout>\n  );\n}\n\nTemplate.propTypes = {\n  data: PropTypes.object\n};\n\nexport const query = graphql`\n  query BlogPostBySlug($slug: String!) {\n    jupyterNotebook(fields: { slug: { eq: $slug } }) {\n      html\n      metadata {\n        title\n        description\n        seoDescription\n        family\n        chartType\n        keywords\n        slug\n      }\n    }\n  }\n`;\n","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}