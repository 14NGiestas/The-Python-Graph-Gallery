{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/map.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","BackgroundMap","title","isTocEnabled","seoDescription","description","className","id","src","style","border","width","height","size","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"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","file":"component---src-pages-map-js-c1874cfa96d421ed9642.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>The first step of any geo-spatial data analysis is to draw the background map of the area of interest. This section explains what are the main ways to build it with <code>Python</code>. It is the foundation of the next sections that will add some data on top of it.</p>\";\n\nexport default function BackgroundMap() {\n\n  return (\n\n    <Layout title=\"Background Map\" isTocEnabled seoDescription=\"A collection of map examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Background Map\"\n        description={chartDescription}\n      />\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Overview\">üîé  Input format and package overview ‚≠ê </h2>\n          <p>\n            A map is basically a set of polygons displayed on a 2 dimensional canvas. There\n            are two problems you need to solve when building one:\n        </p>\n          <ul>\n            <li>\n              <u>Where to find polygon coordinates</u>. It can come from:\n              <ul>\n                <li>a <b>shape file</b> or a <b>geoJson file</b>. That's 2 different ways to store the information. The <code>geopandas</code> package is the best way to read those file formats with Python.</li>\n                <li>a <b>python library</b> like <code>geopandas</code> or <code>basemap</code> providing the information for common location like the US.</li>\n                <li><b>google map</b> or <b>open street map</b>.</li>\n              </ul>\n            </li>\n\n            <br />\n\n            <li>\n              <u>How to plot those polygons?</u>\n              <ul>\n                <li>Once you get a <code>geodataframe</code> thanks to the <code>geopandas</code> package, <code>geoplot</code> is your best choice to build a static map</li>\n                <li>If you need an interactive map from a <code>geodataframe</code>, <code>plotly</code> is a good option.</li>\n                <li>If you want to use google map style maps, <code>folium</code> is the way to go.</li>\n              </ul>\n            </li>\n          </ul>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Geopandas & Geoplot\"><code>Geopandas</code> and <code>GeoPlot</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"map-read-geojson-with-python-geopandas\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/map-read-geojson-with-python-geopandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Folium\"><code>Folium</code> for google maps style maps</h2>\n        <p>\n          <code>Folium</code> is a wrapper of the <code>leaflet.js</code> javascript library. It allows to\n          make all the data wrangling with python, and benefit the power of <code>javascript</code> for interactive\n          data visualization.\n        </p>\n        <p>The map below has been created with folium... with 1 line of code only! üòç</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/288_basic_folium_map.html\" title=\"Basic map with folium\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/288-map-background-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p><code>Folium</code> allows different types of background tiles. Here is an example with a tile called <code>Stamen Toner</code>:</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/288_basic_folium_map_toner.html\" title=\"Folium and customized tile\" style={{ border: \"none\", width: '800px', height: '300px' }}></iframe>\n        </div>\n        <Link to='/288-map-background-with-folium'>\n          <Button size=\"sm\">See code</Button>\n        </Link>\n        <br /><br />\n        <p>It is also possible to add markers with associated popups on top of the map:</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map1\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n          <ChartImageContainer\n            imgName=\"312-add-markers-on-folium-map2\"\n            caption=\"How to read a geoJson file with geopandas and transform it to a geodataframe.\"\n            linkTo=\"/312-add-markers-on-folium-map\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Basemap\">Background map with <code>Basemap</code></h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap1\"\n            caption=\"Most basic map with python and the basemap library.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap2\"\n            caption=\"Select a specific location on the map.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap3\"\n            caption=\"Customize color and features of shapes.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap4\"\n            caption=\"List of available boundaries.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap5\"\n            caption=\"Change projection.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n          <ChartImageContainer\n            imgName=\"281-basic-map-with-basemap6\"\n            caption=\"Use a background tile.\"\n            linkTo=\"/281-basic-map-with-basemap\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}