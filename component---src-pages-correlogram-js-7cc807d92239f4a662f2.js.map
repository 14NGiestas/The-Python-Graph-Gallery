{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/correlogram.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","Correlogram","title","isTocEnabled","description","id","className","size","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,oCCV/C,gPA4Be,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,cAAcC,cAAY,GAEtC,kBAAC,IAAD,CACED,MAAM,cACNE,YApBN,glBAuBI,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKP,GAAI,GACP,6CAAkB,yCAAlB,yFAEA,yEAA8C,kBAAC,IAAD,CAAMC,GAAG,iBAAT,eAA9C,OACI,kBAAC,IAAD,CAAMA,GAAG,cAAT,aADJ,gCAGF,kBAAC,IAAD,CAAKD,GAAI,GACP,kBAAC,IAAD,CAAMC,GAAI,8CACR,kBAAC,IAAD,CAAYL,QAAQ,wBAClBC,QAAQ,kDAIhB,kBAAC,IAAD,KArCO,yKAsCP,8BAGF,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,WAAU,kBAAC,IAAD,MAAjB,oBAA6C,0CAC7C,2BACE,yCADF,2DAEO,wCAFP,mBAE0C,4CAF1C,sJAOA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,QAAQ,0BACRC,QAAQ,8DACRC,OAAO,4BAET,kBAAC,IAAD,CACEF,QAAQ,0BACRC,QAAQ,4DACRC,OAAO,4BAET,kBAAC,IAAD,CACEF,QAAQ,0BACRC,QAAQ,wDACRC,OAAO,8BAKb,kBAAC,IAAD,MAEA,yBAAKS,UAAU,eACb,kBAAC,IAAD,KACE,wBAAID,GAAG,WAAP,qDACA,yEAA8C,kBAAC,IAAD,CAAML,GAAG,iBAAT,gBAA9C,QAA+F,kBAAC,IAAD,CAAMA,GAAG,cAAT,cAA/F,yFAGA,kBAAC,IAAD,CAAMA,GAAG,iBACP,kBAAC,IAAD,CAAQO,KAAK,MAAb,wBAEF,kBAAC,IAAD,CAAMP,GAAG,cACP,kBAAC,IAAD,CAAQO,KAAK,MAAb,wBAKN,kBAAC,IAAD,MAEA,yBAAKD,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBG,YAAY,kBAIpC,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCCxHN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBf,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIa,EAAQE,SAAShB,GACnB,OACE,mCAGJ,IAuBMiB,EAvBOC,YAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAAShB,MAG9B,OAAKiB,EAKH,oCACE,yBAAKN,UAAU,uBACb,kBAAC,IAAD,CACEc,IAAKzB,EACL0B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClCf,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIV,OAbL","file":"component---src-pages-correlogram-js-7cc807d92239f4a662f2.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlogram</a> or <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlation matrix</a> allows to analyse the relationship between each pair of numeric variables of a matrix. The correlation is visualised as a <a href='https://www.python-graph-gallery.com/scatter-plot'>scatterplot</a>. The diagonal represents the distribution of each variable with a <a href='https://www.python-graph-gallery.com/histogram'>histogram</a> or a <a href='https://www.python-graph-gallery.com/density'>density plot</a>.</p > \";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\nimport matplotlib.pyplot as plt\n\n# Basic correlogram\nsns.pairplot(df)\nsns.plt.show()\n`\n\nexport default function Correlogram() {\n\n  return (\n\n    <Layout title=\"Correlogram\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Correlogram\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>Once more, the <code>Seaborn</code> library is here to build a high\n            quality correlogram with a few lines of code only.ðŸ”¥</p>\n            <p>Note that all the stuff you learned in the <Link to='/scatter-plot'>scatterplot</Link>\n            and <Link to='/histogram'>histogram</Link> sections can be used here.</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/110-basic-correlation-matrix-with-seaborn\"}>\n              <ChartImage imgName=\"110_Basic_Correlogram\"\n                caption=\"Basic correlogram with Python and Seaborn.\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\"><Seaborn />Correlogram with <code>Seaborn</code></h2>\n        <p>\n          <code>Seaborn</code> is definitely the best way to build a correlogram\n          with <code>python</code>. It provides a <code>pairplot()</code> function that\n          handles most of the work for you.\n          The examples below give an overview of the customizations you can apply to\n          it to suits your need.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom1\"\n            caption=\"Correlogram with linear trend displayed on each scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom4\"\n            caption=\"Apply colors to each group and customized the scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom7\"\n            caption=\"Customize the distributions displayed on the diagonal\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Related\">&#128161; Scatterplot and Histogram sections are related</h2>\n          <p>Note that a correlogram is an aggregate of <Link to='/scatter-plot'>scatterplots</Link> and <Link to='/histogram'>histograms</Link>. Most of the customizations\n          described in those related sections can be applied here.\n          </p>\n          <Link to=\"/scatter-plot\">\n            <Button size=\"sm\">Scatterplot section</Button>\n          </Link>\n          <Link to=\"/histogram\">\n            <Button size=\"sm\">Histogram section</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}