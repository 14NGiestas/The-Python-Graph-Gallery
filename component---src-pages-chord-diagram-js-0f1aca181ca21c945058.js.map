{"version":3,"sources":["webpack:///./src/components/SectionLogoWithOverlay.js","webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/chord-diagram.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/ChartFamilySection.js"],"names":["generalList","chartTypesInfo","filter","info","family","map","logo","SectionLogoWithOverlay","chartType","caption","link","isGeneralFamily","includes","to","className","ChartImageContainer","imgName","linkTo","xs","md","Chord","title","isTocEnabled","description","id","href","size","style","maxWidth","margin","padding","src","border","width","height","chartFamily","allGifs","ChartImage","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","flow","general","ChartFamilySection","allLogos","chart","fullUrlToInternalLink","pythonURL","key","label"],"mappings":"8FAAA,6FAMMA,EANN,UAMoBC,EACjBC,QAAO,SAAAC,GAAI,MAAoB,YAAhBA,EAAKC,UACpBC,KAAI,SAAAF,GAAI,OAAIA,EAAKG,QAEL,SAASC,EAAT,GAA+D,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAG7DC,EAAkBX,EAAYY,SAASJ,GAE7C,OACE,oCACKG,EAWC,oCACE,kBAAC,IAAD,CAAME,GAAIH,GACR,kBAAC,IAAD,CAAaF,UAAWA,KAE1B,uBAAGM,UAAU,0CAA0CL,IAfvC,oCACpB,yBAAKK,UAAU,wBACb,kBAAC,IAAD,CAAMD,GAAIH,GACR,kBAAC,IAAD,CAAaF,UAAWA,IACxB,yBAAKM,UAAU,sBACb,yBAAKA,UAAU,0BAAf,QAIN,uBAAGA,UAAU,0CAA0CL,O,6DC1B/D,+FAMe,SAASM,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASP,EAAmB,EAAnBA,QAASQ,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,IAAD,CAAMN,GAAII,GACR,kBAAC,IAAD,CAAYD,QAASA,EAASP,QAASA,Q,oFCV/C,4MAiBe,SAASW,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,gBAAgBC,cAAY,GACxC,kBAAC,IAAD,CACED,MAAM,gBACNE,YAVN,6VAaI,kBAAC,IAAD,KACE,wBAAIC,GAAG,iBAAP,0BAA8C,uCAA9C,YACA,4GACgF,4CADhF,OAEE,yCAFF,2DAE8E,uCAF9E,gEAGiC,uBAAGC,KAAK,oCAAR,iBAHjC,KAKA,iHACqF,uBAAGA,KAAK,gDAAR,mBADrF,0EAE6D,yCAF7D,cAIA,kBAAC,IAAD,CAAMZ,GAAG,+BACP,kBAAC,IAAD,CAAQa,KAAK,MAAb,qBAIF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEV,QAAQ,8BACRP,QAAQ,yDACRQ,OAAO,kCAKb,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIO,GAAG,SAAP,sBAAkC,wCAClC,2BACE,uBAAGC,KAAK,qBAAR,SADF,0EAC8G,iDAD9G,yCAIA,0EAC8C,uBAAGA,KAAK,kEAAR,iBAD9C,uEAEoE,6CAFpE,KAIA,yBAAKE,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D,kBAAC,IAAD,CAAMjB,GAAG,iCACP,kBAAC,IAAD,CAAYG,QAAS,kBAAmBP,QAAS,0DAKvD,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIe,GAAG,UAAP,sBAAmC,yCACnC,2BACE,wCADF,4QAMA,8HACO,uBAAGC,KAAK,sDAAR,cADP,mFAIA,yBAAKX,UAAU,WACb,4BAAQiB,IAAI,+CAA+CV,MAAM,4BAA4BM,MAAO,CAAEK,OAAQ,OAAQC,MAAO,QAASC,OAAQ,YAEhJ,uBAAGT,KAAK,sDACN,kBAAC,IAAD,CAAQC,KAAK,MAAb,cAMJ,kBAAC,IAAD,MAEA,yBAAKZ,UAAU,cAAcU,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBW,YAAY,WAIpC,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC7GN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBrB,EAAoB,EAApBA,QAASP,EAAW,EAAXA,QAE5C,GAAI2B,EAAQxB,SAASI,GACnB,OACE,mCAGJ,IAuBMsB,EAvBOC,YAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKjC,SAASI,MAG9B,OAAKsB,EAKH,oCACE,yBAAKxB,UAAU,uBACb,kBAAC,IAAD,CACEgC,IAAK9B,EACL+B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClCjC,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIL,OAbL,O,kCC7CX,iIAQMwC,EAAS,CACbC,aAAc,eACdC,YAAa,cACbC,QAAS,UACTC,aAAc,kBACdC,UAAW,YACXjD,IAAK,MACLkD,KAAM,OACNC,QAAS,qBAGI,SAASC,EAAT,GAA8C,IAAhBtB,EAAe,EAAfA,YACrCuB,EAAWzD,IACdC,QAAO,SAACyD,GAAD,OAAWA,EAAMvD,SAAW+B,KACnC9B,KAAI,SAACsD,EAAOnC,GACX,IAAMd,EAAOkD,YAAsBD,EAAME,WACzC,OACE,kBAAC,IAAD,CAAKC,IAAKtC,EAAIN,GAAI,EAAGC,GAAI,GACvB,kBAAC,IAAD,CACET,KAAMA,EACNF,UAAWmD,EAAMrD,KACjBG,QAASkD,EAAMI,YAMzB,OACE,6BACE,wBAAIvC,GAAG,iBAAiBV,UAAW,gBAAkBqB,GAAcc,aAAnE,EAAmEA,EAASd,IAC5E,kBAAC,IAAD,KAAMuB","file":"component---src-pages-chord-diagram-js-0f1aca181ca21c945058.js","sourcesContent":["import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/chord.html'>chord diagram</a> represents flows or connections between several entities (called nodes). Each entity is represented by a fragment on the outer part of the circular layout. Then, arcs are drawn between each entities. The size of the arc is proportional to the importance of the flow.\";\n\n\nexport default function Chord() {\n\n  return (\n\n    <Layout title=\"Chord diagram\" isTocEnabled>\n      <TitleAndDescription\n        title=\"Chord diagram\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Chord library\">Chord diagram with the <code>Chord</code> library</h2>\n        <p>\n          Chord diagram is not a very usual type of chart. The most common library like <code>Matplotlib</code> and\n          <code>Seaborn</code> will not be of any help to build one. Fortunately, the <code>chord</code> library wraps some functions\n          coming from javascript and the <a href='https://www.d3-graph-gallery.com'>d3.js library</a>.\n        </p>\n        <p>\n          The examples below will guide you through a migration dataset already discussed in <a href='https://www.data-to-viz.com/graph/chord.html'>data-to-viz.com</a>. It starts\n          by describing the input dataset and the basic usage of the <code>Chord()</code> function.\n        </p>\n        <Link to='/chord-diagram-python-chord'>\n          <Button size=\"sm\">\n            Show me the code\n          </Button>\n        </Link>\n        <Row>\n          <ChartImageContainer\n            imgName=\"chord-diagram-chord-library\"\n            caption=\"Most basic chord diagram example from a random matrix.\"\n            linkTo=\"/chord-diagram-python-chord\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Bokeh\">Chord diagram with <code>Bokeh</code></h2>\n        <p>\n          <a href='https://bokeh.org'>Bokeh</a> is a pretty neat python library for data visualization. It provides a <code>chord_from_df()</code> function\n          dedicated to chord diagram.\n        </p>\n        <p>\n          The example below comes straight from their <a href='https://docs.bokeh.org/en/0.12.5/docs/gallery/chord_chart.html'>documentation</a>.\n          It represents the relationship between each character of the book <i>Les mis√©rables</i>.\n        </p>\n        <div style={{ maxWidth: \"600px\", margin: \"0 auto\", padding: 30 }}>\n          <Link to='/231-chord-diagram-with-bokeh'>\n            <ChartImage imgName={'231_Chord_Bokeh'} caption={'Simple chord diagram with the Bokeh python library'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\">Chord diagram with <code>Plotly</code></h2>\n        <p>\n          <code>plotly</code> is a powerful python library for data visualization and also allows\n          to build chord diagrams. The good part is that it builds interactive charts. However\n          if comes with a lot of code complexity so be ready to spend several hours before getting\n          your first figure. &#128542;\n        </p>\n        <p>The example below shows the relationship between several people on facebook. Have a look\n        to the <a href='https://plotly.com/python/v3/filled-chord-diagram/'>plotly doc</a> for explanation and\n        code. Hover over a connection to get names and flow value.\n        </p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/plotly_chord_diagram.html\" title=\"chord diagram with plotly\" style={{ border: \"none\", width: '800px', height: '500px' }}></iframe>\n        </div>\n        <a href='https://plotly.com/python/v3/filled-chord-diagram/'>\n          <Button size=\"sm\">\n            See code\n          </Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"flow\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}