{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/parallel-plot.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","Parallel","title","isTocEnabled","seoDescription","description","id","className","href","src","style","border","width","height","size","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,OAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,kCCV/C,gPAgCe,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,2BAA2BC,cAAY,EAACC,eAAe,sHACnE,kBAAC,IAAD,CACEF,MAAM,2BACNG,YATN,kYAYI,kBAAC,IAAD,KACE,wBAAIC,GAAG,SAAP,iBACA,kBAAC,IAAD,CAAKC,UAAU,sBACb,kBAAC,IAAD,CAAKR,GAAI,GACP,2BAAG,wCAAH,qIAAwJ,wDAAxJ,iCAEF,kBAAC,IAAD,CAAKA,GAAI,GACP,kBAAC,OAAD,CAAMC,GAAI,kCACR,kBAAC,IAAD,CAAYL,QAAQ,kCAClBC,QAAQ,wDAKhB,kBAAC,IAAD,KAzCO,oTA4CT,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIU,GAAG,UAAP,kCAA+C,wCAA/C,QAAuE,yCACvE,0EAC8C,wDAD9C,gBAEK,wCAFL,mEAIA,8EAAmD,uBAAGE,KAAK,wGAAR,yBACnD,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEb,QAAQ,kCACRC,QAAQ,iCACRC,OAAO,qCAKb,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAIS,GAAG,UAAS,kBAAC,IAAD,MAAhB,wCAAkE,yCAClE,2BAAG,wCAAH,2HACA,uGAA4E,wDAA5E,cACA,yBAAKC,UAAU,WACb,4BAAQE,IAAI,0DAA0DP,MAAM,wCAAwCQ,MAAO,CAAEC,OAAQ,OAAQC,MAAO,QAASC,OAAQ,YAEvK,kBAAC,OAAD,CAAMb,GAAG,oCACP,kBAAC,IAAD,CAAQc,KAAK,MAAb,cAMJ,kBAAC,IAAD,MAEA,yBAAKP,UAAU,cAAcD,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBS,YAAY,cAIpC,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC3GN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBtB,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIoB,EAAQE,SAASvB,GACnB,OACE,mCAGJ,IAuBMwB,EAvBOC,yBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASvB,MAG9B,OAAKwB,EAKH,oCACE,yBAAKZ,UAAU,uBACb,kBAAC,IAAD,CACEoB,IAAK/B,EACLgC,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClCrB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIX,OAbL","file":"component---src-pages-parallel-plot-js-edf8453389bfb8438542.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Animation } from \"../components/MiscellaneousLogos\"\nimport { Button, Col } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\nconst quickCode = `# libraries\nimport pandas\nimport matplotlib.pyplot as plt\nfrom pandas.tools.plotting import parallel_coordinates\n\n# Take the iris dataset\nimport seaborn as sns\ndata = sns.load_dataset('iris')\n\n# Make the plot\nparallel_coordinates(data, 'species', colormap=plt.get_cmap(\"Set2\"))\nplt.show()\n`\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/parallel.html'>parallel plot</a> plot allows to compare the feature of several individual observations (series) on a set of numeric variables. Interestingly, <code>Pandas</code> is probably the best way to plot a parallel coordinate plot with python. <code>Plotly</code> is a good alternative to plot interactive versions though.</p>\";\n\nexport default function Parallel() {\n\n  return (\n\n    <Layout title=\"Parallel coordinate plot\" isTocEnabled seoDescription=\"A collection of parallel coordinate chart examples made with Python, coming with explanation and reproducible code\">\n      <TitleAndDescription\n        title=\"Parallel coordinate plot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><code>Pandas</code> is probably the best way to make a parallel coordinate plot. This library is most often used for data wrangling, but it offers a <code>parallel_coordinates()</code> function dedicated to it.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/150-parallel-plot-with-pandas\"}>\n              <ChartImage imgName=\"150_Parrallele_plot_with_pandas\"\n                caption=\"Most basic parallel plot with Python and Pandas.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">Parallel coordinate chart with <code>Python</code> and <code>Pandas</code></h2>\n        <p>\n          The following examples are dedicated to the <code>parallel_coordinates()</code> function\n          of <code>Pandas</code>. It shows how to apply the most common types of customization.\n        </p>\n        <p>If you need to go further, here is the complete <a href='https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.plotting.parallel_coordinates.html'>pandas documentation</a></p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"150_Parrallele_plot_with_pandas\"\n            caption=\"Basic parallel coordinate char\"\n            linkTo=\"/150-parallel-plot-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\"><Animation />Interactive parallel coordinate with <code>plotly</code></h2>\n        <p><code>Plotly</code> is a python library that makes the link with Javascript to build interactive charts that you can display in a browser.</p>\n        <p>The following example is a parallel chart made with this library and the <code>parallel_coordinates()</code> function.</p>\n        <div className=\"mx-auto\">\n          <iframe src=\"/interactiveCharts/parallel-coordinate-plot-plotly.html\" title=\"parallel coordinate chart with plotly\" style={{ border: \"none\", width: '800px', height: '500px' }}></iframe>\n        </div>\n        <Link to=\"/parallel-coordinate-plot-plotly\">\n          <Button size=\"sm\">\n            See code\n          </Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}