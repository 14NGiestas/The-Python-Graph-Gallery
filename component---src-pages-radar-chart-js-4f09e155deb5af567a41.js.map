{"version":3,"sources":["webpack:///./src/components/SectionLogoWithOverlay.js","webpack:///./src/pages/radar-chart.js","webpack:///./src/components/ChartImageContainer.js","webpack:///./src/components/ChartImage.js","webpack:///./src/components/ChartFamilySection.js"],"names":["generalList","chartTypesInfo","filter","info","family","map","logo","SectionLogoWithOverlay","chartType","caption","link","isGeneralFamily","includes","to","className","logoToKeep","SpiderAlternativeLogos","allLogos","chart","id","fullUrlToInternalLink","pythonURL","key","xs","md","label","Heatmap","title","isTocEnabled","description","href","imgName","linkTo","chartFamily","ChartImageContainer","allGifs","ChartImage","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp","TITLES","distribution","correlation","ranking","partOfAWhole","evolution","flow","general","ChartFamilySection"],"mappings":"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","file":"component---src-pages-radar-chart-js-4f09e155deb5af567a41.js","sourcesContent":["import \"./sectionLogoWithOverlay.css\";\nimport { Link } from \"gatsby\";\nimport React from \"react\";\nimport SectionLogo from \"./SectionLogo\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\n\nconst generalList = chartTypesInfo\n  .filter(info => info.family === \"general\")\n  .map(info => info.logo)\n\nexport default function SectionLogoWithOverlay({ chartType, caption, link }) {\n\n  // If the logo is in the \"general\" family, do not display an overlay.\n  const isGeneralFamily = generalList.includes(chartType)\n\n  return (\n    <>\n      { !isGeneralFamily ? (<>\n        <div className=\"sectionLogoContainer\">\n          <Link to={link}>\n            <SectionLogo chartType={chartType} />\n            <div className=\"sectionLogoOverlay\">\n              <div className=\"sectionLogoOverlayText\">+</div>\n            </div>\n          </Link>\n        </div>\n        <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n      </>) : (\n          <>\n            <Link to={link}>\n              <SectionLogo chartType={chartType} />\n            </Link>\n            <p className=\"distributionSection sectionLogoCaption\">{caption}</p>\n          </>\n        )}\n    </>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport ChartImage from \"../components/ChartImage\";\nimport SectionLogoWithOverlay from \"../components/SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\"\nimport { fullUrlToInternalLink } from \"../util/utils\";\nimport Spacing from \"../components/Spacing\";\n\nconst logoToKeep = ['lollipop', 'parallel', 'barplot', 'stackedBar']\nconst SpiderAlternativeLogos = () => {\n  const allLogos = chartTypesInfo\n    .filter((chart) => logoToKeep.includes(chart.id))\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/caveat/spider.html'>radar chart</a> (or <a href='https://www.data-to-viz.com/caveat/spider.html'>spider plot</a>, or <a href='https://www.data-to-viz.com/caveat/spider.html'>polar chart</a>) allows to visualize one or more series of values over multiple quantitative variables. Each variable has its own axis, all axes are joined in the center of the figure. This section shows how to build it with <code>Matplotlib</code>, but keep in mind they are some <a href='https://www.data-to-viz.com/caveat/spider.html'>caveats</a> associated with this chart type.</p>\";\n\nexport default function Heatmap() {\n\n  return (\n\n    <Layout title=\"Radar chart\" isTocEnabled>\n      <TitleAndDescription\n        title=\"Radar Chart\"\n        description={chartDescription}\n      />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Radar chart are criticized</h2>\n          <p>Spider plots are somewhat criticized. The <u>variable order</u> has\n          a huge impact on the chart appearance, <u>scales</u> can be\n          skewed, <u>overplotting</u> makes it hard to\n          read and <u>over-evaluation</u> of differences are the main arguments.\n          </p>\n          <p>You should probably read <a href='https://www.data-to-viz.com/caveat/spider.html'>this article</a> that explains the issues more in depth before building one,\n          and consider switching to one of the alternative below:\n          </p>\n          <SpiderAlternativeLogos />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib /> Radar chart with <code>Matplotlib</code></h2>\n        <p>\n          As far as I know there isn't any library offering a function to build a\n          spider plot quickly. Fortunately, <code>Matplotlib</code> allows a very high\n          level of customization. With a bit of trigonometry and the <code>plot()</code> function you\n          should get your desired viz.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"390_basic_Radarchart\"\n            caption=\"Most basic radar chart with python.\"\n            linkTo=\"/390-basic-radar-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"391_Several_indiv_Radarchart\"\n            caption=\"Radar chart with several displayed values\"\n            linkTo=\"/391-radar-chart-with-several-individuals\"\n          />\n        </Row>\n        <p>Radar charts are often used in combination with faceting. It allows to compare the features\n        of several groups, what would be unreadable if plotted on the same chart.\n          </p>\n        <Link to={\"/392-use-faceting-for-radar-chart\"}>\n          <ChartImage imgName=\"393_Faceting_and_Radarchart\"\n            caption=\"A polar chart with small multiple to compare 4 groups\" />\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import \"./chartFamilySection.css\";\nimport React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport SectionLogoWithOverlay from \"./SectionLogoWithOverlay\";\nimport { chartTypesInfo } from \"../util/sectionDescriptions\";\nimport { fullUrlToInternalLink } from \"../util/utils\";\n\nconst TITLES = {\n  distribution: \"Distribution\",\n  correlation: \"Correlation\",\n  ranking: \"Ranking\",\n  partOfAWhole: \"Part Of A Whole\",\n  evolution: \"Evolution\",\n  map: \"Map\",\n  flow: \"Flow\",\n  general: \"General Knowledge\",\n};\n\nexport default function ChartFamilySection({ chartFamily }) {\n  const allLogos = chartTypesInfo\n    .filter((chart) => chart.family === chartFamily)\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <h2 id=\"Related charts\" className={\"sectionTitle \" + chartFamily}>{TITLES?.[chartFamily]}</h2>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n}\n"],"sourceRoot":""}