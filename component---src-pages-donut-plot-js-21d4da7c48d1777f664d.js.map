{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/components/ChartImage.js","webpack:///./src/pages/donut-plot.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","className","alt","fluid","childImageSharp","Donut","title","isTocEnabled","seoDescription","description","id","style","maxWidth","margin","href","size","chartFamily"],"mappings":"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","file":"component---src-pages-donut-plot-js-21d4da7c48d1777f664d.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={caption}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib } from \"../components/MiscellaneousLogos\"\nimport ChartImage from \"../components/ChartImage\";\nimport { Button, Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\";\nimport Spacing from \"../components/Spacing\";\n\n\nconst chartDescription =\n  \"<p>A Donut chart is essentially a <a href='https://python-graph-gallery.com/pie-plot/'>Pie Chart</a> with an area of the center cut out. You can build one hacking the <code>plt.pie()</code> function of the <code>matplotlib</code> library as shown in the examples below.</p>\";\n\n\nconst quickCode = `# library\nimport matplotlib.pyplot as plt\n\n# create data\nsize_of_groups=[12,11,3,30]\n\n# Create a pieplot\nplt.pie(size_of_groups)\n\n# add a circle at the center to transform it in a donut chart\nmy_circle=plt.Circle( (0,0), 0.7, color='white')\np=plt.gcf()\np.gca().add_artist(my_circle)\n\nplt.show()\n`\n\nexport default function Donut() {\n\n  return (\n\n    <Layout title=\"Donut plot\" isTocEnabled seoDescription=\"A collection of donut chart examples made with Python, coming with explanation and reproducible code\">\n\n      <TitleAndDescription\n        title=\"Donut Plot\"\n        description={chartDescription}\n      />\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p><code>matplotlib</code> allows to build a <Link to=\"/pie-plot\">pie chart</Link> easily\n            thanks to its <code>pie()</code> function. Visit the <Link to=\"/pie-plot\">dedicated section</Link> for more about that.</p>\n            <p>We can use\n            the exact same principle and add a circle to the center thanks to the\n              <code>circle()</code> function and get a donut chart.ðŸ”¥</p>\n          </Col>\n          <Col md={6}>\n            <Link to={\"/160-basic-donut-plot\"}>\n              <ChartImage imgName=\"160_Basic_donut_plot\"\n                caption=\"Most basic donut chart with Python and Matplotlib\" />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; Mind the donut!</h2>\n          <p>As his friend the <Link to='/pie-plot'>Pie chart</Link>, the Donut chart is often criticized. Humans\n          are pretty bad at reading angles, making it hard to rank the groups accurately. Most\n          of the time, it is better to display the\n            information as a <Link to='/barplot'>barchart</Link>, a <Link to='/treemap'>treemap</Link> or a <Link to='/lollipop-plot'>lollipop</Link> plot.</p>\n          <p>Have a look to the 3 pie charts below, can you spot the pattern hidden in it?</p>\n          <div style={{ maxWidth: \"600px\", margin: \"0 auto\" }}>\n            <Link to='/173-elaborated-venn-diagram'>\n              <ChartImage imgName={'pieChartIssue'} caption={'The matplotlib-venn library allows a high level of customization. Here is an example taking advantage of it'} />\n            </Link>\n          </div>\n          <a href='https://www.data-to-viz.com/caveat/pie.html'>\n            <Button size=\"sm\">See it as a barplot</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\"><Matplotlib />Donut plot with <code>Matplotlib</code></h2>\n        <p>\n          The example above is a good start but you probably need to go further. The blog posts linked below\n          explain common tasks like <Link to='/161-custom-matplotlib-donut-plot'>adding and\n          customizing labels</Link>, change section colors, add <Link to='/161-custom-matplotlib-donut-plot'>padding</Link> between each\n          and more.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"161_custom_donut_plot5\"\n            caption=\"Add and customize the labels\"\n            linkTo=\"/161-custom-matplotlib-donut-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"161_custom_donut_plot3\"\n            caption=\"Customize the donut section colors\"\n            linkTo=\"/161-custom-matplotlib-donut-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"161_custom_donut_plot6\"\n            caption=\"Add blank space between each donut section.\"\n            linkTo=\"/161-custom-matplotlib-donut-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"162_Background_color_donut\"\n            caption=\"How to make the rectangle colors relative to their values.\"\n            linkTo=\"/162-change-background-of-donut-plot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n"],"sourceRoot":""}