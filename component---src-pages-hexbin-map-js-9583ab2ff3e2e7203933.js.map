{"version":3,"sources":["webpack:///./src/components/ChartImageContainer.js","webpack:///./src/pages/hexbin-map.js","webpack:///./src/components/ChartImage.js"],"names":["ChartImageContainer","imgName","caption","linkTo","xs","md","to","HexbinMap","title","isTocEnabled","description","className","id","href","style","margin","padding","chartFamily","allGifs","ChartImage","includes","image","useStaticQuery","allFile","edges","find","n","node","name","alt","fluid","childImageSharp"],"mappings":"uHAAA,+FAMe,SAASA,EAAT,GAA4D,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAC9D,OACE,kBAAC,IAAD,CAAKC,GAAI,GAAIC,GAAI,GACf,kBAAC,OAAD,CAAMC,GAAIH,GACR,kBAAC,IAAD,CAAYF,QAASA,EAASC,QAASA,Q,oCCV/C,sNAmBe,SAASK,IAEtB,OAEE,kBAAC,IAAD,CAAQC,MAAM,iBAAiBC,cAAY,GAEzC,kBAAC,IAAD,CACED,MAAM,iBACNE,YAVN,iSAaI,kBAAC,IAAD,MAEA,yBAAKC,UAAU,cAAcC,GAAG,WAC9B,kBAAC,IAAD,KACE,wBAAIA,GAAG,YAAP,iCACA,yFAC6D,uBAAGC,KAAK,oDAAR,mBAD7D,KAGA,4BACE,sCAAW,0DAAX,qIACA,6BACA,sCAAW,yCAAX,iKAKN,kBAAC,IAAD,MAEA,kBAAC,IAAD,KACE,wBAAID,GAAG,mBAAP,qCACA,2BACE,yCADF,6DACgF,wCADhF,8JAKA,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEX,QAAQ,mCACRC,QAAQ,kDACRC,OAAO,oCAET,kBAAC,IAAD,CACEF,QAAQ,mCACRC,QAAQ,0CACRC,OAAO,qCAGX,6BAAM,6BACN,iEAAsC,4CAAtC,cACA,yBAAKW,MAAO,CAAEC,OAAQ,SAAUC,QAAS,IACvC,kBAAC,OAAD,CAAMV,GAAG,mCACP,kBAAC,IAAD,CAAYL,QAAS,sCAAuCC,QAAS,8DAK3E,kBAAC,IAAD,MAEA,yBAAKS,UAAU,cAAcC,GAAG,WAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAoBK,YAAY,UAIpC,kBAAC,IAAD,MAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,OAGF,kBAAC,IAAD,S,kCC3FN,sGAMMC,EAAU,CAAC,iBAAkB,yBAA0B,wBAI9C,SAASC,EAAT,GAA2C,IAArBlB,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAE5C,GAAIgB,EAAQE,SAASnB,GACnB,OACE,mCAGJ,IAuBMoB,EAvBOC,yBAAe,cAuBTC,QAAQC,MAAMC,MAAK,SAACC,GACrC,OAAOA,EAAEC,KAAKC,KAAKR,SAASnB,MAG9B,OAAKoB,EAKH,oCACE,yBAAKV,UAAU,uBACb,kBAAC,IAAD,CACEkB,IAAK5B,EACL6B,MAAOT,EAAMM,KAAKI,gBAAgBD,MAClCnB,UAAU,kBAEZ,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,yBACb,2BAAIT,OAbL","file":"component---src-pages-hexbin-map-js-9583ab2ff3e2e7203933.js","sourcesContent":["import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport TitleAndDescription from \"../components/TitleAndDescription\";\nimport Layout from \"../components/Layout\";\nimport Container from \"react-bootstrap/Container\";\nimport Contact from \"../components/Contact\";\nimport Row from \"react-bootstrap/Row\";\nimport ChartImageContainer from \"../components/ChartImageContainer\";\nimport ChartFamilySection from \"../components/ChartFamilySection\";\nimport { Link } from \"gatsby\";\nimport { Matplotlib, Seaborn } from \"../components/MiscellaneousLogos\"\nimport { Col } from \"react-bootstrap\";\nimport CodeChunk from \"../components/CodeChunk\"\nimport ChartImage from \"../components/ChartImage\";\nimport Spacing from \"../components/Spacing\";\nimport { Button } from \"react-bootstrap\";\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/hexbinmap.html'>hexbin map</a> is a specific type of map where each region is represented as a hexagone. This section explains how to build a hexbin map with python and libraries like <code>geopandas</code> and <code>geoplot</code>.</p>\";\n\nexport default function HexbinMap() {\n\n  return (\n\n    <Layout title=\"Background Map\" isTocEnabled>\n\n      <TitleAndDescription\n        title=\"Background Map\"\n        description={chartDescription}\n      />\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Overview\">üîé  2 kinds of hexbin maps ‚≠ê </h2>\n          <p>\n            There are 2 different kinds of hexbin maps as explained in <a href='https://www.data-to-viz.com/graph/hexbinmap.html'>data-to-viz.com</a>:\n        </p>\n          <ul>\n            <li>from a <u>hexagonal geospatial object</u>. Example: you find a `geoJson` file of US counties where each county is represented as a hexagon instead of with its real shape.</li>\n            <br />\n            <li>from a <u>2d density</u> technique. A set of coordinates is provided. The map is split in many hexagones and the number of data points is represented as a color in each hexagone.</li>\n          </ul>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"From geospatial\">Hexbin map from geospatial object</h2>\n        <p>\n          <code>Seaborn</code> is another great alternative to build an area chart with <code>python</code>. The below examples\n          show how to start basic, apply usual customization, and use the small multiple technique\n          for when you have several groups to compare.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"hexbin-map-from-geojson-python-1\"\n            caption=\"Most basic hexbin map from geoJson with python.\"\n            linkTo=\"/hexbin-map-from-geojson-python\"\n          />\n          <ChartImageContainer\n            imgName=\"hexbin-map-from-geojson-python-2\"\n            caption=\"Compute polygon centroid to add labels.\"\n            linkTo=\"/hexbin-map-from-geojson-python\"\n          />\n        </Row>\n        <br /><br />\n        <p>This is what you get with a bit of <code>matplotlib</code> tweaking:</p>\n        <div style={{ margin: \"0 auto\", padding: 0 }}>\n          <Link to='/hexbin-map-from-geojson-python'>\n            <ChartImage imgName={'hexbin-map-from-geojson-python-orig'} caption={'Clean hexbin map with python, geopandas and matplotlib'} />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"map\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n\n    </Layout >\n  );\n}\n","import \"./chartImage.css\";\n\nimport React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport Img from \"gatsby-image\";\n\nconst allGifs = [\"animated_chart\", \"animated_gapminder.gif\", \"animated_volcano.gif\"]\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n\n  if (allGifs.includes(imgName)) {\n    return (\n      <p>TODO</p>)\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              fluid {\n                aspectRatio\n                base64\n                sizes\n                src\n                srcWebp\n                srcSet\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <Img\n          alt={imgName}\n          fluid={image.node.childImageSharp.fluid}\n          className=\"chartImageImg\"\n        />\n        <div className=\"chartImageOverlay\">\n          <div className=\"chartImageOverlayText\">\n            <p>{caption}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n"],"sourceRoot":""}